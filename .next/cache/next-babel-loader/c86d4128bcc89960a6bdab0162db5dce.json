{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nconst colorScale = {\n  WASM_EXPORT: {\n    fill: '#1892C7',\n    font: '#FFFFFF'\n  },\n  WASM_IMPORT: {\n    fill: '#FF6939',\n    font: '#FFFFFF'\n  },\n  WASM_INTERNAL: {\n    fill: '#000000',\n    font: '#FFFFFF'\n  },\n  WASM_WORKER: {\n    fill: '#1892C7',\n    font: '#FFFFFF'\n  },\n  JS: {\n    fill: '#cccccc',\n    font: '#000000'\n  }\n};\nconst grayScale = {\n  WASM_EXPORT: {\n    fill: '#000000',\n    font: '#FFFFFF'\n  },\n  WASM_IMPORT: {\n    fill: '#969696',\n    font: '#FFFFFF'\n  },\n  WASM_INTERNAL: {\n    fill: '#cccccc',\n    font: '#000000'\n  },\n  WASM_WORKER: {\n    fill: '#000000',\n    font: '#FFFFFF'\n  },\n  JS: {\n    fill: '#636363',\n    font: '#FFFFFF'\n  }\n};\nexport default class GraphComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      graphOptions: {\n        combineWorkersAndWindow: true,\n        tooLarge: false,\n        useGrayscale: false\n      }\n    };\n    this.graphRef = React.createRef();\n    this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n    this.svgPanZoom = null;\n  }\n\n  handleCheckboxChange() {\n    const isChecked = this.state.graphOptions.useGrayscale;\n\n    const newGraphOptions = _objectSpread({}, this.state.graphOptions);\n\n    newGraphOptions.useGrayscale = !isChecked;\n    this.setState({\n      graphOptions: newGraphOptions\n    });\n  }\n\n  initGraph() {\n    var container = this.graphRef.current;\n    let model = new mxGraphModel();\n    this.graph = new mxGraph(container, model);\n    const graph = this.graph;\n    graph.setPanning(false);\n    graph.setEnabled(false);\n    graph.autoSizeCellsOnAdd = true;\n    const colorsToUse = this.state.graphOptions.useGrayscale ? grayScale : colorScale;\n\n    const commonFunctionStyle = () => {\n      var style = new Object();\n      style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n      style[mxConstants.STYLE_AUTOSIZE] = '1';\n      style[mxConstants.STYLE_SPACING] = '20'; // style[mxConstants.STYLE_SPACING_TOP] = '2';\n      // style[mxConstants.STYLE_SPACING_BOTTOM] = '2';\n\n      style[mxConstants.STYLE_MOVABLE] = '1';\n      style[mxConstants.STYLE_FONTSIZE] = '20';\n      style[mxConstants.STYLE_FONTSTYLE] = mxConstants.FONT_BOLD;\n      style[mxConstants.STYLE_FONTFAMILY] = 'Arial';\n      return style;\n    };\n\n    var wasmExportFunctionStyle = commonFunctionStyle();\n    wasmExportFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_EXPORT'].fill;\n    wasmExportFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n    wasmExportFunctionStyle[mxConstants.STYLE_FONTCOLOR] = colorsToUse['WASM_EXPORT'].font;\n    graph.getStylesheet().putCellStyle('WASM_EXPORT', wasmExportFunctionStyle);\n    var wasmImportFunctionStyle = commonFunctionStyle();\n    wasmImportFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_IMPORT'].fill;\n    wasmImportFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n    wasmImportFunctionStyle[mxConstants.STYLE_FONTCOLOR] = colorsToUse['WASM_IMPORT'].font;\n    graph.getStylesheet().putCellStyle('WASM_IMPORT', wasmImportFunctionStyle);\n    var wasmInternalFunctionStyle = commonFunctionStyle();\n    wasmInternalFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_INTERNAL'].fill;\n    wasmInternalFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n    wasmInternalFunctionStyle[mxConstants.STYLE_FONTCOLOR] = colorsToUse['WASM_INTERNAL'].font;\n    graph.getStylesheet().putCellStyle('WASM_INTERNAL', wasmInternalFunctionStyle);\n    var wasmWorkerFunctionStyle = commonFunctionStyle();\n    wasmWorkerFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_WORKER'].fill;\n    wasmWorkerFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n    wasmWorkerFunctionStyle[mxConstants.STYLE_FONTCOLOR] = colorsToUse['WASM_WORKER'].font;\n    graph.getStylesheet().putCellStyle('WASM_WORKER', wasmWorkerFunctionStyle);\n    var jsFunctionStyle = commonFunctionStyle();\n    jsFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['JS'].fill;\n    jsFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n    jsFunctionStyle[mxConstants.STYLE_FONTCOLOR] = colorsToUse['JS'].font;\n    graph.getStylesheet().putCellStyle('JS', jsFunctionStyle);\n    return graph;\n  }\n\n  drawGraph() {\n    var container = this.graphRef.current;\n    const {\n      combineWorkersAndWindow\n    } = this.state.graphOptions;\n    const {\n      details\n    } = this.props;\n    const windowDetails = details.window;\n    const workers = details.workers;\n    const vertexDimensions = [0, 0, 100, 50];\n\n    if (windowDetails == null) {\n      return __jsx(\"span\", null);\n    }\n\n    const exportCalls = windowDetails.exportCalls;\n    const importCalls = windowDetails.importCalls;\n    let graph;\n\n    if (this.graph == null) {\n      graph = this.initGraph();\n    } else {\n      graph = this.graph;\n      graph.removeCells(graph.getChildCells(graph.getDefaultParent(), true, true));\n      graph = null;\n      graph = this.initGraph();\n    }\n\n    const model = graph.getModel();\n    var parent = graph.getDefaultParent();\n    var layout = new mxHierarchicalLayout(graph);\n    layout.interRankCellSpacing = 100;\n    model.beginUpdate();\n    const allNodesCombined = {};\n\n    const addKeyFunctions = (functionName, parentVertex, leafStyle) => {\n      let vertex;\n\n      if (allNodesCombined[functionName] == null) {\n        vertex = graph.insertVertex(parentVertex, null, `${functionName}()`, ...vertexDimensions, leafStyle);\n        allNodesCombined[functionName] = vertex;\n      } else {\n        vertex = allNodesCombined[functionName];\n      }\n    };\n\n    const addToGraph = (functionName, edgesForFunction, parentVertex, leafStyle) => {\n      let vertex;\n      const allNodesSeparate = {};\n      const edgeList = edgesForFunction;\n\n      if (combineWorkersAndWindow) {\n        if (allNodesCombined[functionName] == null) {\n          vertex = graph.insertVertex(parentVertex, null, `${functionName}()`, ...vertexDimensions, leafStyle);\n          allNodesCombined[functionName] = vertex;\n        } else {\n          vertex = allNodesCombined[functionName];\n        }\n      } else {\n        if (allNodesSeparate[functionName] == null) {\n          vertex = graph.insertVertex(parentVertex, null, `${functionName}()`, ...vertexDimensions, leafStyle);\n          allNodesSeparate[functionName] = vertex;\n        } else {\n          vertex = allNodesSeparate[functionName];\n        }\n      }\n\n      for (const edges of edgeList) {\n        let previousFunction;\n\n        for (let stackFunctionName of edges) {\n          let jsStyle = 'JS';\n\n          if (stackFunctionName.includes('wasm-function___')) {\n            jsStyle = 'WASM_INTERNAL';\n            stackFunctionName = stackFunctionName.replace('wasm-function___', '');\n          }\n\n          let currentFunction = combineWorkersAndWindow ? allNodesCombined[stackFunctionName] : allNodesSeparate[stackFunctionName];\n\n          if (currentFunction == null) {\n            currentFunction = graph.insertVertex(parentVertex, null, `${stackFunctionName}()`, ...vertexDimensions, jsStyle);\n\n            if (combineWorkersAndWindow) {\n              allNodesCombined[stackFunctionName] = currentFunction;\n            } else {\n              allNodesSeparate[stackFunctionName] = currentFunction;\n            }\n          }\n\n          if (previousFunction != null) {\n            const currentEdges = currentFunction.edges;\n            const previousEdges = previousFunction.edges;\n            let alreadyInGraph = false;\n\n            if (currentEdges != null) {\n              for (const edge of currentEdges) {\n                if (edge.target.value === previousFunction.value) {\n                  // debugger;\n                  alreadyInGraph = true;\n                }\n              }\n            }\n\n            if (!alreadyInGraph) {\n              graph.insertEdge(parentVertex, null, '', currentFunction, previousFunction);\n            }\n\n            previousFunction = currentFunction;\n          } else {\n            previousFunction = currentFunction;\n          }\n        }\n      }\n    };\n\n    for (const scopeInstrumentationRecords of [windowDetails, ...workers]) {\n      const wasmFileHashes = _Object$keys(scopeInstrumentationRecords.WasmFiles);\n\n      for (const wasmFileHash of wasmFileHashes) {\n        const wasmRecordedCallDetails = scopeInstrumentationRecords.WasmFiles[wasmFileHash];\n        const debugFunctionNames = wasmRecordedCallDetails.functionNameObjects;\n        const wasmExportCalls = wasmRecordedCallDetails.exportCalls;\n        const wasmImportCalls = wasmRecordedCallDetails.importCalls;\n\n        const exportFuntionNames = _Object$keys(wasmExportCalls);\n\n        const importFuntionNames = _Object$keys(wasmImportCalls);\n\n        if (combineWorkersAndWindow) {\n          for (const exportFuntionName of exportFuntionNames) {\n            addKeyFunctions(exportFuntionName, parent, 'WASM_EXPORT');\n          }\n        } //Need to be sliced and formatted\n\n\n        for (const exportFuntionName of exportFuntionNames) {\n          const edgeList = wasmExportCalls[exportFuntionName];\n          addToGraph(exportFuntionName, edgeList, parent, 'WASM_EXPORT');\n        }\n\n        if (combineWorkersAndWindow) {\n          for (const importFuntionName of importFuntionNames) {\n            addKeyFunctions(importFuntionName, parent, 'WASM_IMPORT');\n          }\n        }\n\n        for (const importFuntionName of importFuntionNames) {\n          const edgeList = wasmImportCalls[importFuntionName];\n          addToGraph(importFuntionName, edgeList, parent, 'WASM_IMPORT');\n        }\n      }\n    }\n\n    model.endUpdate();\n    layout.execute(parent);\n  }\n\n  componentDidMount() {\n    this.drawGraph();\n    var container = this.graphRef.current.children[0];\n    let eventsHandler = {\n      haltEventListeners: ['touchstart', 'touchend', 'touchmove', 'touchleave', 'touchcancel'],\n      init: function (options) {\n        var instance = options.instance,\n            initialScale = 1,\n            pannedX = 0,\n            pannedY = 0; // Init Hammer\n        // Listen only for pointer and touch events\n\n        this.hammer = Hammer(options.svgElement, {\n          inputClass: Hammer.SUPPORT_POINTER_EVENTS ? Hammer.PointerEventInput : Hammer.TouchInput\n        }); // Enable pinch\n\n        this.hammer.get('pinch').set({\n          enable: true\n        }); // Handle double tap\n\n        this.hammer.on('doubletap', function (ev) {\n          instance.zoomIn();\n        }); // Handle pan\n\n        this.hammer.on('panstart panmove', function (ev) {\n          // On pan start reset panned variables\n          if (ev.type === 'panstart') {\n            pannedX = 0;\n            pannedY = 0;\n          } // Pan only the difference\n\n\n          instance.panBy({\n            x: ev.deltaX - pannedX,\n            y: ev.deltaY - pannedY\n          });\n          pannedX = ev.deltaX;\n          pannedY = ev.deltaY;\n        }); // Handle pinch\n\n        this.hammer.on('pinchstart pinchmove', function (ev) {\n          // On pinch start remember initial zoom\n          if (ev.type === 'pinchstart') {\n            initialScale = instance.getZoom();\n            instance.zoomAtPoint(initialScale * ev.scale, {\n              x: ev.center.x,\n              y: ev.center.y\n            });\n          }\n\n          instance.zoomAtPoint(initialScale * ev.scale, {\n            x: ev.center.x,\n            y: ev.center.y\n          });\n        }); // Prevent moving the page on some devices when panning over SVG\n\n        options.svgElement.addEventListener('touchmove', function (e) {\n          e.preventDefault();\n        });\n      },\n      destroy: function () {\n        this.hammer.destroy();\n      }\n    };\n    this.svgPanZoom = svgPanZoom(container, {\n      zoomScaleSensitivity: 0.2,\n      minZoom: 0.2,\n      contain: true,\n      customEventsHandler: eventsHandler\n    });\n  }\n\n  render() {\n    const {\n      graphOptions\n    } = this.state;\n    const {\n      combineWorkersAndWindow,\n      tooLarge,\n      useGrayscale\n    } = graphOptions;\n    const isChecked = useGrayscale === true;\n    return __jsx(\"div\", null, __jsx(\"h4\", null, \"JS/Wasm Interaction Graph\"), __jsx(Row, null, __jsx(Col, {\n      sm: 3\n    }, __jsx(\"div\", {\n      style: {\n        width: '20px',\n        height: '20px',\n        backgroundColor: colorScale['WASM_EXPORT'].fill,\n        display: 'inline-block'\n      }\n    }), \"\\xA0\", __jsx(\"span\", null, \"WebAssembly Export\")), __jsx(Col, {\n      sm: 3\n    }, __jsx(\"div\", {\n      style: {\n        width: '20px',\n        height: '20px',\n        backgroundColor: colorScale['WASM_IMPORT'].fill,\n        display: 'inline-block'\n      }\n    }), \"\\xA0\", __jsx(\"span\", null, \"WebAssembly Imported JS Function\")), __jsx(Col, {\n      sm: 3\n    }, __jsx(\"div\", {\n      style: {\n        width: '20px',\n        height: '20px',\n        backgroundColor: colorScale.WASM_INTERNAL.fill,\n        display: 'inline-block'\n      }\n    }), \"\\xA0\", __jsx(\"span\", null, \"WebAssembly Internal Function\")), __jsx(Col, {\n      sm: 3\n    }, __jsx(\"div\", {\n      style: {\n        width: '20px',\n        height: '20px',\n        backgroundColor: colorScale.JS.fill,\n        display: 'inline-block'\n      }\n    }), \"\\xA0\", __jsx(\"span\", null, \"JavaScript Function\"))), __jsx(Row, {\n      style: {\n        position: 'absolute',\n        left: '0',\n        margin: '0',\n        padding: '0',\n        width: '99vw'\n      }\n    }, __jsx(Col, null, __jsx(\"div\", {\n      id: \"graph\",\n      ref: this.graphRef,\n      style: {\n        width: '100%',\n        overflow: 'hidden',\n        border: '1px solid #ececec',\n        borderRadius: '5px'\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["D:/Work/WasmView/components/graphComponent.js"],"names":["React","Component","Row","Col","colorScale","WASM_EXPORT","fill","font","WASM_IMPORT","WASM_INTERNAL","WASM_WORKER","JS","grayScale","GraphComponent","constructor","props","state","graphOptions","combineWorkersAndWindow","tooLarge","useGrayscale","graphRef","createRef","handleCheckboxChange","bind","svgPanZoom","isChecked","newGraphOptions","setState","initGraph","container","current","model","mxGraphModel","graph","mxGraph","setPanning","setEnabled","autoSizeCellsOnAdd","colorsToUse","commonFunctionStyle","style","Object","mxConstants","STYLE_SHAPE","SHAPE_RECTANGLE","STYLE_AUTOSIZE","STYLE_SPACING","STYLE_MOVABLE","STYLE_FONTSIZE","STYLE_FONTSTYLE","FONT_BOLD","STYLE_FONTFAMILY","wasmExportFunctionStyle","STYLE_FILLCOLOR","STYLE_STROKECOLOR","STYLE_FONTCOLOR","getStylesheet","putCellStyle","wasmImportFunctionStyle","wasmInternalFunctionStyle","wasmWorkerFunctionStyle","jsFunctionStyle","drawGraph","details","windowDetails","window","workers","vertexDimensions","exportCalls","importCalls","removeCells","getChildCells","getDefaultParent","getModel","parent","layout","mxHierarchicalLayout","interRankCellSpacing","beginUpdate","allNodesCombined","addKeyFunctions","functionName","parentVertex","leafStyle","vertex","insertVertex","addToGraph","edgesForFunction","allNodesSeparate","edgeList","edges","previousFunction","stackFunctionName","jsStyle","includes","replace","currentFunction","currentEdges","previousEdges","alreadyInGraph","edge","target","value","insertEdge","scopeInstrumentationRecords","wasmFileHashes","WasmFiles","wasmFileHash","wasmRecordedCallDetails","debugFunctionNames","functionNameObjects","wasmExportCalls","wasmImportCalls","exportFuntionNames","importFuntionNames","exportFuntionName","importFuntionName","endUpdate","execute","componentDidMount","children","eventsHandler","haltEventListeners","init","options","instance","initialScale","pannedX","pannedY","hammer","Hammer","svgElement","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","TouchInput","get","set","enable","on","ev","zoomIn","type","panBy","x","deltaX","y","deltaY","getZoom","zoomAtPoint","scale","center","addEventListener","e","preventDefault","destroy","zoomScaleSensitivity","minZoom","contain","customEventsHandler","render","width","height","backgroundColor","display","position","left","margin","padding","overflow","border","borderRadius"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nconst colorScale = {\n    WASM_EXPORT: {\n        fill: '#1892C7',\n        font: '#FFFFFF'\n    },\n    WASM_IMPORT: {\n\n         fill: '#FF6939',\n        font: '#FFFFFF'\n    },\n    WASM_INTERNAL: {\n        fill: '#000000',\n        font: '#FFFFFF'\n    },\n    WASM_WORKER: {\n        fill: '#1892C7',\n        font: '#FFFFFF'\n    },\n    JS: {\n        fill: '#cccccc',\n        font: '#000000'\n    },\n}\n\nconst grayScale = {\n    WASM_EXPORT: {\n        fill: '#000000',\n        font: '#FFFFFF'\n    },\n    WASM_IMPORT: {\n        fill: '#969696',\n        font: '#FFFFFF'\n    },\n    WASM_INTERNAL: {\n        fill: '#cccccc',\n        font: '#000000'\n    },\n    WASM_WORKER: {\n        fill: '#000000',\n        font: '#FFFFFF'\n    },\n    JS: {\n        fill: '#636363',\n        font: '#FFFFFF'\n    },\n}\n\nexport default class GraphComponent extends Component {\n    constructor(props){\n        super(props);\n\n        this.state= {\n            graphOptions: {\n                combineWorkersAndWindow: true,\n                tooLarge: false,\n                useGrayscale: false,\n                \n            },\n            \n        };\n\n        this.graphRef = React.createRef();\n        this.handleCheckboxChange = this.handleCheckboxChange.bind(this)\n        this.svgPanZoom = null;\n    }\n\n    handleCheckboxChange(){\n        const isChecked = this.state.graphOptions.useGrayscale;\n\n        const newGraphOptions = {...this.state.graphOptions};\n        newGraphOptions.useGrayscale = !isChecked;\n        this.setState({graphOptions: newGraphOptions });\n\n    }\n\n    initGraph(){\n        var container = this.graphRef.current;\n        let model = new mxGraphModel();\n\n        this.graph = new mxGraph(container, model);\n        const graph = this.graph;\n        graph.setPanning(false);\n        graph.setEnabled(false);\n        graph.autoSizeCellsOnAdd = true;\n\n\n        const colorsToUse = this.state.graphOptions.useGrayscale? grayScale : colorScale;\n\n        const commonFunctionStyle = () => {\n            var style = new Object();\n            style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n            style[mxConstants.STYLE_AUTOSIZE] = '1';\n            style[mxConstants.STYLE_SPACING] = '20';\n            // style[mxConstants.STYLE_SPACING_TOP] = '2';\n            // style[mxConstants.STYLE_SPACING_BOTTOM] = '2';\n            style[mxConstants.STYLE_MOVABLE] = '1';\n            style[mxConstants.STYLE_FONTSIZE]= '20';\n            style[mxConstants.STYLE_FONTSTYLE]= mxConstants.FONT_BOLD;\n            style[mxConstants.STYLE_FONTFAMILY] = 'Arial';\n            return style\n        }\n\n\n        var wasmExportFunctionStyle = commonFunctionStyle();\n        wasmExportFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_EXPORT'].fill;\n        wasmExportFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n        wasmExportFunctionStyle[mxConstants.STYLE_FONTCOLOR]= colorsToUse['WASM_EXPORT'].font;\n        graph.getStylesheet().putCellStyle('WASM_EXPORT',wasmExportFunctionStyle);\n\n        var wasmImportFunctionStyle = commonFunctionStyle();\n        wasmImportFunctionStyle[mxConstants.STYLE_FILLCOLOR] =colorsToUse['WASM_IMPORT'].fill;\n        wasmImportFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n        wasmImportFunctionStyle[mxConstants.STYLE_FONTCOLOR]= colorsToUse['WASM_IMPORT'].font;\n        graph.getStylesheet().putCellStyle('WASM_IMPORT',wasmImportFunctionStyle);\n\n        var wasmInternalFunctionStyle = commonFunctionStyle();\n        wasmInternalFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_INTERNAL'].fill;\n        wasmInternalFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n        wasmInternalFunctionStyle[mxConstants.STYLE_FONTCOLOR]= colorsToUse['WASM_INTERNAL'].font;\n        graph.getStylesheet().putCellStyle('WASM_INTERNAL',wasmInternalFunctionStyle);\n\n        var wasmWorkerFunctionStyle = commonFunctionStyle();\n        wasmWorkerFunctionStyle[mxConstants.STYLE_FILLCOLOR] =colorsToUse['WASM_WORKER'].fill;\n        wasmWorkerFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n        wasmWorkerFunctionStyle[mxConstants.STYLE_FONTCOLOR]= colorsToUse['WASM_WORKER'].font;\n        graph.getStylesheet().putCellStyle('WASM_WORKER',wasmWorkerFunctionStyle);\n        \n        var jsFunctionStyle = commonFunctionStyle();\n        jsFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['JS'].fill;\n        jsFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n        jsFunctionStyle[mxConstants.STYLE_FONTCOLOR]= colorsToUse['JS'].font;\n        graph.getStylesheet().putCellStyle('JS',jsFunctionStyle);\n\n        return graph;\n    }\n\n    drawGraph(){\n        var container = this.graphRef.current;\n\n        const {combineWorkersAndWindow} = this.state.graphOptions;\n        const { details } =this.props;\n        const windowDetails = details.window;\n        const workers = details.workers;\n        const vertexDimensions = [0, 0, 100, 50]\n        if(windowDetails == null){\n            return <span></span>;\n        }\n\n        const exportCalls = windowDetails.exportCalls;\n        const importCalls = windowDetails.importCalls;\n\n\n        let graph;\n        if(this.graph == null){\n            graph = this.initGraph()\n        } else {\n            graph = this.graph\n            graph.removeCells(graph.getChildCells(graph.getDefaultParent(), true, true))\n            graph = null;\n            graph = this.initGraph()\n\n        }\n        const model = graph.getModel() \n        \n        var parent = graph.getDefaultParent();\n        \n        var layout = new mxHierarchicalLayout(graph)\n        layout.interRankCellSpacing = 100;\n        model\n        .beginUpdate();\n        const allNodesCombined = {};\n\n        const addKeyFunctions = (functionName, parentVertex, leafStyle) => {\n            let vertex;\n            if(allNodesCombined[functionName] == null){\n\n                vertex = graph.insertVertex(parentVertex, null, `${functionName}()`, ...vertexDimensions , leafStyle);\n                allNodesCombined[functionName] = vertex;\n            } else {\n                vertex = allNodesCombined[functionName];\n            }\n        }\n\n        const addToGraph = (functionName, edgesForFunction, parentVertex, leafStyle) => {\n            let vertex;\n            const allNodesSeparate = {};\n            const edgeList =  edgesForFunction; \n            if(combineWorkersAndWindow){\n                if(allNodesCombined[functionName] == null){\n                    vertex = graph.insertVertex(parentVertex, null, `${functionName}()`, ...vertexDimensions , leafStyle);\n                    allNodesCombined[functionName] = vertex;\n                } else {\n                    vertex = allNodesCombined[functionName];\n                }\n            } else {\n                if(allNodesSeparate[functionName] == null){\n                    vertex = graph.insertVertex(parentVertex, null, `${functionName}()`, ...vertexDimensions , leafStyle);\n                    allNodesSeparate[functionName] = vertex;\n                } else {\n                    vertex = allNodesSeparate[functionName];\n                }\n            }\n        \n\n\n            for(const edges of edgeList){\n                let previousFunction;\n                for(let stackFunctionName of edges){\n                    let jsStyle = 'JS';\n                        if(stackFunctionName.includes('wasm-function___')){\n                            jsStyle = 'WASM_INTERNAL';\n                            stackFunctionName = stackFunctionName.replace('wasm-function___', '');\n                        }\n                    let currentFunction = combineWorkersAndWindow ?  allNodesCombined[stackFunctionName] : allNodesSeparate[stackFunctionName];\n                    \n                    if(currentFunction == null){\n                        \n                        currentFunction= graph.insertVertex(parentVertex, null, `${stackFunctionName}()`, ...vertexDimensions, jsStyle);\n                        if(combineWorkersAndWindow){\n                            allNodesCombined[stackFunctionName]  = currentFunction;\n                        } else{\n                            allNodesSeparate[stackFunctionName]  = currentFunction;\n                        }\n                    }\n\n                    if(previousFunction != null){\n                        const currentEdges = currentFunction.edges;\n                        const previousEdges = previousFunction.edges;\n                        let alreadyInGraph = false;\n                        if(currentEdges != null){\n                            for(const edge of currentEdges){\n                                if(edge.target.value === previousFunction.value ){\n                                    // debugger;\n                                    alreadyInGraph = true;\n                                }\n                            }\n                        }\n\n                        if(!alreadyInGraph){\n                            graph.insertEdge(parentVertex, null, '', currentFunction, previousFunction);\n                        }\n                        previousFunction = currentFunction;\n\n                        \n                    } else {\n                        previousFunction = currentFunction;\n                    }\n    \n                }\n            }\n        }\n\n        for(const scopeInstrumentationRecords of [windowDetails, ...workers]){\n            const wasmFileHashes = Object.keys(scopeInstrumentationRecords.WasmFiles);\n\n            for(const wasmFileHash of wasmFileHashes){\n                const wasmRecordedCallDetails = scopeInstrumentationRecords.WasmFiles[wasmFileHash];\n    \n                const debugFunctionNames = wasmRecordedCallDetails.functionNameObjects;\n                const wasmExportCalls = wasmRecordedCallDetails.exportCalls;\n                const wasmImportCalls = wasmRecordedCallDetails.importCalls;\n                const exportFuntionNames = Object.keys(wasmExportCalls);\n                const importFuntionNames = Object.keys(wasmImportCalls);\n    \n                if(combineWorkersAndWindow){\n                    for(const exportFuntionName of exportFuntionNames){\n                        addKeyFunctions(exportFuntionName, parent, 'WASM_EXPORT');\n                    }\n                }\n\n                //Need to be sliced and formatted\n                for(const exportFuntionName of exportFuntionNames){\n                    const edgeList = wasmExportCalls[exportFuntionName];\n                    addToGraph(exportFuntionName, edgeList, parent, 'WASM_EXPORT');\n                }\n        \n                if(combineWorkersAndWindow){\n                    for(const importFuntionName of importFuntionNames){\n                        addKeyFunctions(importFuntionName, parent, 'WASM_IMPORT');\n                    }\n                }\n\n                for(const importFuntionName of importFuntionNames){\n                    const edgeList = wasmImportCalls[importFuntionName];\n                    addToGraph(importFuntionName, edgeList, parent, 'WASM_IMPORT');\n                }\n            }\n        }\n\n\n        \n        model\n        .endUpdate();\n        layout.execute(parent)\n\n\n    }\n\n    componentDidMount(){\n        this.drawGraph();\n\n\n\n        var container = this.graphRef.current.children[0];\n\n        let eventsHandler = {\n            haltEventListeners: ['touchstart', 'touchend', 'touchmove', 'touchleave', 'touchcancel']\n        , init: function(options) {\n            var instance = options.instance\n              , initialScale = 1\n              , pannedX = 0\n              , pannedY = 0\n            // Init Hammer\n            // Listen only for pointer and touch events\n            this.hammer = Hammer(options.svgElement, {\n              inputClass: Hammer.SUPPORT_POINTER_EVENTS ? Hammer.PointerEventInput : Hammer.TouchInput\n            })\n            // Enable pinch\n            this.hammer.get('pinch').set({enable: true})\n            // Handle double tap\n            this.hammer.on('doubletap', function(ev){\n              instance.zoomIn()\n            })\n            // Handle pan\n            this.hammer.on('panstart panmove', function(ev){\n              // On pan start reset panned variables\n              if (ev.type === 'panstart') {\n                pannedX = 0\n                pannedY = 0\n              }\n              // Pan only the difference\n              instance.panBy({x: ev.deltaX - pannedX, y: ev.deltaY - pannedY})\n              pannedX = ev.deltaX\n              pannedY = ev.deltaY\n            })\n            // Handle pinch\n            this.hammer.on('pinchstart pinchmove', function(ev){\n              // On pinch start remember initial zoom\n              if (ev.type === 'pinchstart') {\n                initialScale = instance.getZoom()\n                instance.zoomAtPoint(initialScale * ev.scale, {x: ev.center.x, y: ev.center.y})\n              }\n              instance.zoomAtPoint(initialScale * ev.scale, {x: ev.center.x, y: ev.center.y})\n            })\n            // Prevent moving the page on some devices when panning over SVG\n            options.svgElement.addEventListener('touchmove', function(e){ e.preventDefault(); });\n          }\n        , destroy: function(){\n            this.hammer.destroy()\n          }\n        }\n\n        this.svgPanZoom = svgPanZoom(container, {\n            zoomScaleSensitivity: 0.2\n            , minZoom: 0.2\n            , contain: true\n            ,customEventsHandler: eventsHandler\n        })\n        \n        \n\n    }\n\n\n\n    render() {\n        const {graphOptions} = this.state;\n        const {combineWorkersAndWindow, tooLarge, useGrayscale} = graphOptions;\n        const isChecked = useGrayscale === true;\n\n        return (\n            <div>\n            <h4>JS/Wasm Interaction Graph</h4>\n            <Row>\n                <Col sm={3}>\n                    <div style={{\n                        width: '20px',\n                        height: '20px',\n                        backgroundColor: colorScale['WASM_EXPORT'].fill,\n                        display: 'inline-block'\n                    }}>\n                    </div>\n                    &nbsp;\n                    <span>WebAssembly Export</span>\n                </Col>\n                <Col sm={3}>\n                    <div style={{\n                        width: '20px',\n                        height: '20px',\n                        backgroundColor: colorScale['WASM_IMPORT'].fill,\n                        display: 'inline-block'\n                    }}>\n                    </div>\n                    &nbsp;\n                    <span>WebAssembly Imported JS Function</span>\n                </Col>\n                <Col sm={3}>\n                    <div style={{\n                        width: '20px',\n                        height: '20px',\n                        backgroundColor: colorScale.WASM_INTERNAL.fill,\n                        display: 'inline-block'\n                    }}>\n                    </div>\n                    &nbsp;\n                    <span>WebAssembly Internal Function</span>\n                </Col>\n                <Col sm={3}>\n                    <div style={{\n                        width: '20px',\n                        height: '20px',\n                        backgroundColor: colorScale.JS.fill,\n                        display: 'inline-block'\n                    }}>\n                    </div>\n                    &nbsp;\n                    <span>JavaScript Function</span>\n                </Col>\n            </Row>\n            <Row style={{\n                position: 'absolute',\n                left: '0',\n                margin: '0',\n                padding: '0',\n                width: '99vw'\n            }}>\n                <Col>\n                   \n                    <div id=\"graph\" ref={this.graphRef}\n                    style={{\n                        width: '100%',\n                        overflow: 'hidden',\n                        border: '1px solid #ececec',\n                        borderRadius: '5px',\n                    }}></div>\n                </Col>\n            </Row>\n            </div>\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}