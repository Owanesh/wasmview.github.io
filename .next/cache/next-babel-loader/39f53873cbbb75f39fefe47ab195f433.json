{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nvar colorScale = {\n  WASM_EXPORT: {\n    fill: '#1892C7',\n    font: '#FFFFFF'\n  },\n  WASM_IMPORT: {\n    fill: '#FF6939',\n    font: '#FFFFFF'\n  },\n  WASM_INTERNAL: {\n    fill: '#000000',\n    font: '#FFFFFF'\n  },\n  WASM_WORKER: {\n    fill: '#1892C7',\n    font: '#FFFFFF'\n  },\n  JS: {\n    fill: '#cccccc',\n    font: '#000000'\n  }\n};\nvar grayScale = {\n  WASM_EXPORT: {\n    fill: '#000000',\n    font: '#FFFFFF'\n  },\n  WASM_IMPORT: {\n    fill: '#969696',\n    font: '#FFFFFF'\n  },\n  WASM_INTERNAL: {\n    fill: '#cccccc',\n    font: '#000000'\n  },\n  WASM_WORKER: {\n    fill: '#000000',\n    font: '#FFFFFF'\n  },\n  JS: {\n    fill: '#636363',\n    font: '#FFFFFF'\n  }\n};\n\nvar GraphComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GraphComponent, _Component);\n\n  function GraphComponent(props) {\n    var _this;\n\n    _classCallCheck(this, GraphComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GraphComponent).call(this, props));\n    _this.state = {\n      graphOptions: {\n        combineWorkersAndWindow: true,\n        tooLarge: false,\n        useGrayscale: false\n      }\n    };\n    _this.graphRef = React.createRef();\n    _this.handleCheckboxChange = _this.handleCheckboxChange.bind(_assertThisInitialized(_this));\n    _this.svgPanZoom = null;\n    return _this;\n  }\n\n  _createClass(GraphComponent, [{\n    key: \"handleCheckboxChange\",\n    value: function handleCheckboxChange() {\n      var isChecked = this.state.graphOptions.useGrayscale;\n\n      var newGraphOptions = _objectSpread({}, this.state.graphOptions);\n\n      newGraphOptions.useGrayscale = !isChecked;\n      this.setState({\n        graphOptions: newGraphOptions\n      });\n    }\n  }, {\n    key: \"initGraph\",\n    value: function initGraph() {\n      var container = this.graphRef.current;\n      var model = new mxGraphModel();\n      this.graph = new mxGraph(container, model);\n      var graph = this.graph;\n      graph.setPanning(false);\n      graph.setEnabled(false);\n      graph.autoSizeCellsOnAdd = true;\n      var colorsToUse = this.state.graphOptions.useGrayscale ? grayScale : colorScale;\n\n      var commonFunctionStyle = function commonFunctionStyle() {\n        var style = new Object();\n        style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n        style[mxConstants.STYLE_AUTOSIZE] = '1';\n        style[mxConstants.STYLE_SPACING] = '20'; // style[mxConstants.STYLE_SPACING_TOP] = '2';\n        // style[mxConstants.STYLE_SPACING_BOTTOM] = '2';\n\n        style[mxConstants.STYLE_MOVABLE] = '1';\n        style[mxConstants.STYLE_FONTSIZE] = '28';\n        style[mxConstants.STYLE_FONTSTYLE] = mxConstants.FONT_BOLD;\n        style[mxConstants.STYLE_FONTFAMILY] = 'Arial';\n        return style;\n      };\n\n      var wasmExportFunctionStyle = commonFunctionStyle();\n      wasmExportFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_EXPORT'].fill;\n      wasmExportFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n      wasmExportFunctionStyle[mxConstants.STYLE_FONTCOLOR] = colorsToUse['WASM_EXPORT'].font;\n      graph.getStylesheet().putCellStyle('WASM_EXPORT', wasmExportFunctionStyle);\n      var wasmImportFunctionStyle = commonFunctionStyle();\n      wasmImportFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_IMPORT'].fill;\n      wasmImportFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n      wasmImportFunctionStyle[mxConstants.STYLE_FONTCOLOR] = colorsToUse['WASM_IMPORT'].font;\n      graph.getStylesheet().putCellStyle('WASM_IMPORT', wasmImportFunctionStyle);\n      var wasmInternalFunctionStyle = commonFunctionStyle();\n      wasmInternalFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_INTERNAL'].fill;\n      wasmInternalFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n      wasmInternalFunctionStyle[mxConstants.STYLE_FONTCOLOR] = colorsToUse['WASM_INTERNAL'].font;\n      graph.getStylesheet().putCellStyle('WASM_INTERNAL', wasmInternalFunctionStyle);\n      var wasmWorkerFunctionStyle = commonFunctionStyle();\n      wasmWorkerFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_WORKER'].fill;\n      wasmWorkerFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n      wasmWorkerFunctionStyle[mxConstants.STYLE_FONTCOLOR] = colorsToUse['WASM_WORKER'].font;\n      graph.getStylesheet().putCellStyle('WASM_WORKER', wasmWorkerFunctionStyle);\n      var jsFunctionStyle = commonFunctionStyle();\n      jsFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['JS'].fill;\n      jsFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n      jsFunctionStyle[mxConstants.STYLE_FONTCOLOR] = colorsToUse['JS'].font;\n      graph.getStylesheet().putCellStyle('JS', jsFunctionStyle);\n      return graph;\n    }\n  }, {\n    key: \"drawGraph\",\n    value: function drawGraph() {\n      var container = this.graphRef.current;\n      var combineWorkersAndWindow = this.state.graphOptions.combineWorkersAndWindow;\n      var details = this.props.details;\n      var windowDetails = details.window;\n      var workers = details.workers;\n      var vertexDimensions = [0, 0, 100, 50];\n\n      if (windowDetails == null) {\n        return __jsx(\"span\", null);\n      }\n\n      var exportCalls = windowDetails.exportCalls;\n      var importCalls = windowDetails.importCalls;\n      var graph;\n\n      if (this.graph == null) {\n        graph = this.initGraph();\n      } else {\n        graph = this.graph;\n        graph.removeCells(graph.getChildCells(graph.getDefaultParent(), true, true));\n        graph = null;\n        graph = this.initGraph();\n      }\n\n      var model = graph.getModel();\n      var parent = graph.getDefaultParent();\n      var layout = new mxHierarchicalLayout(graph);\n      layout.interRankCellSpacing = 100;\n      model.beginUpdate();\n      var allNodesCombined = {};\n\n      var addKeyFunctions = function addKeyFunctions(functionName, parentVertex, leafStyle) {\n        var vertex;\n\n        if (allNodesCombined[functionName] == null) {\n          var _graph;\n\n          vertex = (_graph = graph).insertVertex.apply(_graph, [parentVertex, null, \"\".concat(functionName, \"()\")].concat(vertexDimensions, [leafStyle]));\n          allNodesCombined[functionName] = vertex;\n        } else {\n          vertex = allNodesCombined[functionName];\n        }\n      };\n\n      var addToGraph = function addToGraph(functionName, edgesForFunction, parentVertex, leafStyle) {\n        var vertex;\n        var allNodesSeparate = {};\n        var edgeList = edgesForFunction;\n\n        if (combineWorkersAndWindow) {\n          if (allNodesCombined[functionName] == null) {\n            var _graph2;\n\n            vertex = (_graph2 = graph).insertVertex.apply(_graph2, [parentVertex, null, \"\".concat(functionName, \"()\")].concat(vertexDimensions, [leafStyle]));\n            allNodesCombined[functionName] = vertex;\n          } else {\n            vertex = allNodesCombined[functionName];\n          }\n        } else {\n          if (allNodesSeparate[functionName] == null) {\n            var _graph3;\n\n            vertex = (_graph3 = graph).insertVertex.apply(_graph3, [parentVertex, null, \"\".concat(functionName, \"()\")].concat(vertexDimensions, [leafStyle]));\n            allNodesSeparate[functionName] = vertex;\n          } else {\n            vertex = allNodesSeparate[functionName];\n          }\n        }\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _getIterator(edgeList), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var edges = _step.value;\n            var previousFunction = void 0;\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = _getIterator(edges), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var stackFunctionName = _step2.value;\n                var jsStyle = 'JS';\n\n                if (stackFunctionName.includes('wasm-function___')) {\n                  jsStyle = 'WASM_INTERNAL';\n                  stackFunctionName = stackFunctionName.replace('wasm-function___', '');\n                }\n\n                var currentFunction = combineWorkersAndWindow ? allNodesCombined[stackFunctionName] : allNodesSeparate[stackFunctionName];\n\n                if (currentFunction == null) {\n                  var _graph4;\n\n                  currentFunction = (_graph4 = graph).insertVertex.apply(_graph4, [parentVertex, null, \"\".concat(stackFunctionName, \"()\")].concat(vertexDimensions, [jsStyle]));\n\n                  if (combineWorkersAndWindow) {\n                    allNodesCombined[stackFunctionName] = currentFunction;\n                  } else {\n                    allNodesSeparate[stackFunctionName] = currentFunction;\n                  }\n                }\n\n                if (previousFunction != null) {\n                  var currentEdges = currentFunction.edges;\n                  var previousEdges = previousFunction.edges;\n                  var alreadyInGraph = false;\n\n                  if (currentEdges != null) {\n                    var _iteratorNormalCompletion3 = true;\n                    var _didIteratorError3 = false;\n                    var _iteratorError3 = undefined;\n\n                    try {\n                      for (var _iterator3 = _getIterator(currentEdges), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                        var edge = _step3.value;\n\n                        if (edge.target.value === previousFunction.value) {\n                          // debugger;\n                          alreadyInGraph = true;\n                        }\n                      }\n                    } catch (err) {\n                      _didIteratorError3 = true;\n                      _iteratorError3 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n                          _iterator3[\"return\"]();\n                        }\n                      } finally {\n                        if (_didIteratorError3) {\n                          throw _iteratorError3;\n                        }\n                      }\n                    }\n                  }\n\n                  if (!alreadyInGraph) {\n                    graph.insertEdge(parentVertex, null, '', currentFunction, previousFunction);\n                  }\n\n                  previousFunction = currentFunction;\n                } else {\n                  previousFunction = currentFunction;\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n                  _iterator2[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      };\n\n      for (var _i = 0, _arr = [windowDetails].concat(_toConsumableArray(workers)); _i < _arr.length; _i++) {\n        var scopeInstrumentationRecords = _arr[_i];\n\n        var wasmFileHashes = _Object$keys(scopeInstrumentationRecords.WasmFiles);\n\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = _getIterator(wasmFileHashes), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var wasmFileHash = _step4.value;\n            var wasmRecordedCallDetails = scopeInstrumentationRecords.WasmFiles[wasmFileHash];\n            var debugFunctionNames = wasmRecordedCallDetails.functionNameObjects;\n            var wasmExportCalls = wasmRecordedCallDetails.exportCalls;\n            var wasmImportCalls = wasmRecordedCallDetails.importCalls;\n\n            var exportFuntionNames = _Object$keys(wasmExportCalls);\n\n            var importFuntionNames = _Object$keys(wasmImportCalls);\n\n            if (combineWorkersAndWindow) {\n              var _iteratorNormalCompletion5 = true;\n              var _didIteratorError5 = false;\n              var _iteratorError5 = undefined;\n\n              try {\n                for (var _iterator5 = _getIterator(exportFuntionNames), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                  var exportFuntionName = _step5.value;\n                  addKeyFunctions(exportFuntionName, parent, 'WASM_EXPORT');\n                }\n              } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion5 && _iterator5[\"return\"] != null) {\n                    _iterator5[\"return\"]();\n                  }\n                } finally {\n                  if (_didIteratorError5) {\n                    throw _iteratorError5;\n                  }\n                }\n              }\n            } //Need to be sliced and formatted\n\n\n            var _iteratorNormalCompletion6 = true;\n            var _didIteratorError6 = false;\n            var _iteratorError6 = undefined;\n\n            try {\n              for (var _iterator6 = _getIterator(exportFuntionNames), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                var _exportFuntionName = _step6.value;\n                var edgeList = wasmExportCalls[_exportFuntionName];\n                addToGraph(_exportFuntionName, edgeList, parent, 'WASM_EXPORT');\n              }\n            } catch (err) {\n              _didIteratorError6 = true;\n              _iteratorError6 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion6 && _iterator6[\"return\"] != null) {\n                  _iterator6[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError6) {\n                  throw _iteratorError6;\n                }\n              }\n            }\n\n            if (combineWorkersAndWindow) {\n              var _iteratorNormalCompletion7 = true;\n              var _didIteratorError7 = false;\n              var _iteratorError7 = undefined;\n\n              try {\n                for (var _iterator7 = _getIterator(importFuntionNames), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                  var importFuntionName = _step7.value;\n                  addKeyFunctions(importFuntionName, parent, 'WASM_IMPORT');\n                }\n              } catch (err) {\n                _didIteratorError7 = true;\n                _iteratorError7 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion7 && _iterator7[\"return\"] != null) {\n                    _iterator7[\"return\"]();\n                  }\n                } finally {\n                  if (_didIteratorError7) {\n                    throw _iteratorError7;\n                  }\n                }\n              }\n            }\n\n            var _iteratorNormalCompletion8 = true;\n            var _didIteratorError8 = false;\n            var _iteratorError8 = undefined;\n\n            try {\n              for (var _iterator8 = _getIterator(importFuntionNames), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                var _importFuntionName = _step8.value;\n                var _edgeList = wasmImportCalls[_importFuntionName];\n                addToGraph(_importFuntionName, _edgeList, parent, 'WASM_IMPORT');\n              }\n            } catch (err) {\n              _didIteratorError8 = true;\n              _iteratorError8 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion8 && _iterator8[\"return\"] != null) {\n                  _iterator8[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError8) {\n                  throw _iteratorError8;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null) {\n              _iterator4[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      }\n\n      model.endUpdate();\n      layout.execute(parent);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawGraph();\n      var container = this.graphRef.current.children[0];\n      var eventsHandler = {\n        haltEventListeners: ['touchstart', 'touchend', 'touchmove', 'touchleave', 'touchcancel'],\n        init: function init(options) {\n          var instance = options.instance,\n              initialScale = 1,\n              pannedX = 0,\n              pannedY = 0; // Init Hammer\n          // Listen only for pointer and touch events\n\n          this.hammer = Hammer(options.svgElement, {\n            inputClass: Hammer.SUPPORT_POINTER_EVENTS ? Hammer.PointerEventInput : Hammer.TouchInput\n          }); // Enable pinch\n\n          this.hammer.get('pinch').set({\n            enable: true\n          }); // Handle double tap\n\n          this.hammer.on('doubletap', function (ev) {\n            instance.zoomIn();\n          }); // Handle pan\n\n          this.hammer.on('panstart panmove', function (ev) {\n            // On pan start reset panned variables\n            if (ev.type === 'panstart') {\n              pannedX = 0;\n              pannedY = 0;\n            } // Pan only the difference\n\n\n            instance.panBy({\n              x: ev.deltaX - pannedX,\n              y: ev.deltaY - pannedY\n            });\n            pannedX = ev.deltaX;\n            pannedY = ev.deltaY;\n          }); // Handle pinch\n\n          this.hammer.on('pinchstart pinchmove', function (ev) {\n            // On pinch start remember initial zoom\n            if (ev.type === 'pinchstart') {\n              initialScale = instance.getZoom();\n              instance.zoomAtPoint(initialScale * ev.scale, {\n                x: ev.center.x,\n                y: ev.center.y\n              });\n            }\n\n            instance.zoomAtPoint(initialScale * ev.scale, {\n              x: ev.center.x,\n              y: ev.center.y\n            });\n          }); // Prevent moving the page on some devices when panning over SVG\n\n          options.svgElement.addEventListener('touchmove', function (e) {\n            e.preventDefault();\n          });\n        },\n        destroy: function destroy() {\n          this.hammer.destroy();\n        }\n      };\n      this.svgPanZoom = svgPanZoom(container, {\n        zoomScaleSensitivity: 0.2,\n        minZoom: 0.2,\n        contain: true,\n        customEventsHandler: eventsHandler\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var graphOptions = this.state.graphOptions;\n      var combineWorkersAndWindow = graphOptions.combineWorkersAndWindow,\n          tooLarge = graphOptions.tooLarge,\n          useGrayscale = graphOptions.useGrayscale;\n      var isChecked = useGrayscale === true;\n      return __jsx(\"div\", null, __jsx(\"h4\", null, \"JS/Wasm Interaction Graph\"), __jsx(Row, null, __jsx(Col, {\n        sm: 3\n      }, __jsx(\"div\", {\n        style: {\n          width: '20px',\n          height: '20px',\n          backgroundColor: colorScale['WASM_EXPORT'].fill,\n          display: 'inline-block'\n        }\n      }), \"\\xA0\", __jsx(\"span\", null, \"WebAssembly Export\")), __jsx(Col, {\n        sm: 3\n      }, __jsx(\"div\", {\n        style: {\n          width: '20px',\n          height: '20px',\n          backgroundColor: colorScale['WASM_IMPORT'].fill,\n          display: 'inline-block'\n        }\n      }), \"\\xA0\", __jsx(\"span\", null, \"WebAssembly Imported JS Function\")), __jsx(Col, {\n        sm: 3\n      }, __jsx(\"div\", {\n        style: {\n          width: '20px',\n          height: '20px',\n          backgroundColor: colorScale.WASM_INTERNAL.fill,\n          display: 'inline-block'\n        }\n      }), \"\\xA0\", __jsx(\"span\", null, \"WebAssembly Internal Function\")), __jsx(Col, {\n        sm: 3\n      }, __jsx(\"div\", {\n        style: {\n          width: '20px',\n          height: '20px',\n          backgroundColor: colorScale.JS.fill,\n          display: 'inline-block'\n        }\n      }), \"\\xA0\", __jsx(\"span\", null, \"JavaScript Function\"))), __jsx(Row, {\n        style: {\n          position: 'absolute',\n          left: '0',\n          margin: '0',\n          padding: '0',\n          width: '99vw'\n        }\n      }, __jsx(Col, null, __jsx(\"div\", {\n        id: \"graph\",\n        ref: this.graphRef,\n        style: {\n          width: '100%',\n          overflow: 'hidden',\n          border: '1px solid #ececec',\n          borderRadius: '5px'\n        }\n      }))));\n    }\n  }]);\n\n  return GraphComponent;\n}(Component);\n\nexport { GraphComponent as default };","map":{"version":3,"sources":["D:/Work/WasmView/components/graphComponent.js"],"names":["React","Component","Row","Col","colorScale","WASM_EXPORT","fill","font","WASM_IMPORT","WASM_INTERNAL","WASM_WORKER","JS","grayScale","GraphComponent","props","state","graphOptions","combineWorkersAndWindow","tooLarge","useGrayscale","graphRef","createRef","handleCheckboxChange","bind","svgPanZoom","isChecked","newGraphOptions","setState","container","current","model","mxGraphModel","graph","mxGraph","setPanning","setEnabled","autoSizeCellsOnAdd","colorsToUse","commonFunctionStyle","style","Object","mxConstants","STYLE_SHAPE","SHAPE_RECTANGLE","STYLE_AUTOSIZE","STYLE_SPACING","STYLE_MOVABLE","STYLE_FONTSIZE","STYLE_FONTSTYLE","FONT_BOLD","STYLE_FONTFAMILY","wasmExportFunctionStyle","STYLE_FILLCOLOR","STYLE_STROKECOLOR","STYLE_FONTCOLOR","getStylesheet","putCellStyle","wasmImportFunctionStyle","wasmInternalFunctionStyle","wasmWorkerFunctionStyle","jsFunctionStyle","details","windowDetails","window","workers","vertexDimensions","exportCalls","importCalls","initGraph","removeCells","getChildCells","getDefaultParent","getModel","parent","layout","mxHierarchicalLayout","interRankCellSpacing","beginUpdate","allNodesCombined","addKeyFunctions","functionName","parentVertex","leafStyle","vertex","insertVertex","addToGraph","edgesForFunction","allNodesSeparate","edgeList","edges","previousFunction","stackFunctionName","jsStyle","includes","replace","currentFunction","currentEdges","previousEdges","alreadyInGraph","edge","target","value","insertEdge","scopeInstrumentationRecords","wasmFileHashes","WasmFiles","wasmFileHash","wasmRecordedCallDetails","debugFunctionNames","functionNameObjects","wasmExportCalls","wasmImportCalls","exportFuntionNames","importFuntionNames","exportFuntionName","importFuntionName","endUpdate","execute","drawGraph","children","eventsHandler","haltEventListeners","init","options","instance","initialScale","pannedX","pannedY","hammer","Hammer","svgElement","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","TouchInput","get","set","enable","on","ev","zoomIn","type","panBy","x","deltaX","y","deltaY","getZoom","zoomAtPoint","scale","center","addEventListener","e","preventDefault","destroy","zoomScaleSensitivity","minZoom","contain","customEventsHandler","width","height","backgroundColor","display","position","left","margin","padding","overflow","border","borderRadius"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nconst colorScale = {\n    WASM_EXPORT: {\n        fill: '#1892C7',\n        font: '#FFFFFF'\n    },\n    WASM_IMPORT: {\n\n         fill: '#FF6939',\n        font: '#FFFFFF'\n    },\n    WASM_INTERNAL: {\n        fill: '#000000',\n        font: '#FFFFFF'\n    },\n    WASM_WORKER: {\n        fill: '#1892C7',\n        font: '#FFFFFF'\n    },\n    JS: {\n        fill: '#cccccc',\n        font: '#000000'\n    },\n}\n\nconst grayScale = {\n    WASM_EXPORT: {\n        fill: '#000000',\n        font: '#FFFFFF'\n    },\n    WASM_IMPORT: {\n        fill: '#969696',\n        font: '#FFFFFF'\n    },\n    WASM_INTERNAL: {\n        fill: '#cccccc',\n        font: '#000000'\n    },\n    WASM_WORKER: {\n        fill: '#000000',\n        font: '#FFFFFF'\n    },\n    JS: {\n        fill: '#636363',\n        font: '#FFFFFF'\n    },\n}\n\nexport default class GraphComponent extends Component {\n    constructor(props){\n        super(props);\n\n        this.state= {\n            graphOptions: {\n                combineWorkersAndWindow: true,\n                tooLarge: false,\n                useGrayscale: false,\n                \n            },\n            \n        };\n\n        this.graphRef = React.createRef();\n        this.handleCheckboxChange = this.handleCheckboxChange.bind(this)\n        this.svgPanZoom = null;\n    }\n\n    handleCheckboxChange(){\n        const isChecked = this.state.graphOptions.useGrayscale;\n\n        const newGraphOptions = {...this.state.graphOptions};\n        newGraphOptions.useGrayscale = !isChecked;\n        this.setState({graphOptions: newGraphOptions });\n\n    }\n\n    initGraph(){\n        var container = this.graphRef.current;\n        let model = new mxGraphModel();\n\n        this.graph = new mxGraph(container, model);\n        const graph = this.graph;\n        graph.setPanning(false);\n        graph.setEnabled(false);\n        graph.autoSizeCellsOnAdd = true;\n\n\n        const colorsToUse = this.state.graphOptions.useGrayscale? grayScale : colorScale;\n\n        const commonFunctionStyle = () => {\n            var style = new Object();\n            style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n            style[mxConstants.STYLE_AUTOSIZE] = '1';\n            style[mxConstants.STYLE_SPACING] = '20';\n            // style[mxConstants.STYLE_SPACING_TOP] = '2';\n            // style[mxConstants.STYLE_SPACING_BOTTOM] = '2';\n            style[mxConstants.STYLE_MOVABLE] = '1';\n            style[mxConstants.STYLE_FONTSIZE]= '28';\n            style[mxConstants.STYLE_FONTSTYLE]= mxConstants.FONT_BOLD;\n            style[mxConstants.STYLE_FONTFAMILY] = 'Arial';\n            return style\n        }\n\n\n        var wasmExportFunctionStyle = commonFunctionStyle();\n        wasmExportFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_EXPORT'].fill;\n        wasmExportFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n        wasmExportFunctionStyle[mxConstants.STYLE_FONTCOLOR]= colorsToUse['WASM_EXPORT'].font;\n        graph.getStylesheet().putCellStyle('WASM_EXPORT',wasmExportFunctionStyle);\n\n        var wasmImportFunctionStyle = commonFunctionStyle();\n        wasmImportFunctionStyle[mxConstants.STYLE_FILLCOLOR] =colorsToUse['WASM_IMPORT'].fill;\n        wasmImportFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n        wasmImportFunctionStyle[mxConstants.STYLE_FONTCOLOR]= colorsToUse['WASM_IMPORT'].font;\n        graph.getStylesheet().putCellStyle('WASM_IMPORT',wasmImportFunctionStyle);\n\n        var wasmInternalFunctionStyle = commonFunctionStyle();\n        wasmInternalFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_INTERNAL'].fill;\n        wasmInternalFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n        wasmInternalFunctionStyle[mxConstants.STYLE_FONTCOLOR]= colorsToUse['WASM_INTERNAL'].font;\n        graph.getStylesheet().putCellStyle('WASM_INTERNAL',wasmInternalFunctionStyle);\n\n        var wasmWorkerFunctionStyle = commonFunctionStyle();\n        wasmWorkerFunctionStyle[mxConstants.STYLE_FILLCOLOR] =colorsToUse['WASM_WORKER'].fill;\n        wasmWorkerFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n        wasmWorkerFunctionStyle[mxConstants.STYLE_FONTCOLOR]= colorsToUse['WASM_WORKER'].font;\n        graph.getStylesheet().putCellStyle('WASM_WORKER',wasmWorkerFunctionStyle);\n        \n        var jsFunctionStyle = commonFunctionStyle();\n        jsFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['JS'].fill;\n        jsFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n        jsFunctionStyle[mxConstants.STYLE_FONTCOLOR]= colorsToUse['JS'].font;\n        graph.getStylesheet().putCellStyle('JS',jsFunctionStyle);\n\n        return graph;\n    }\n\n    drawGraph(){\n        var container = this.graphRef.current;\n\n        const {combineWorkersAndWindow} = this.state.graphOptions;\n        const { details } =this.props;\n        const windowDetails = details.window;\n        const workers = details.workers;\n        const vertexDimensions = [0, 0, 100, 50]\n        if(windowDetails == null){\n            return <span></span>;\n        }\n\n        const exportCalls = windowDetails.exportCalls;\n        const importCalls = windowDetails.importCalls;\n\n\n        let graph;\n        if(this.graph == null){\n            graph = this.initGraph()\n        } else {\n            graph = this.graph\n            graph.removeCells(graph.getChildCells(graph.getDefaultParent(), true, true))\n            graph = null;\n            graph = this.initGraph()\n\n        }\n        const model = graph.getModel() \n        \n        var parent = graph.getDefaultParent();\n        \n        var layout = new mxHierarchicalLayout(graph)\n        layout.interRankCellSpacing = 100;\n        model\n        .beginUpdate();\n        const allNodesCombined = {};\n\n        const addKeyFunctions = (functionName, parentVertex, leafStyle) => {\n            let vertex;\n            if(allNodesCombined[functionName] == null){\n\n                vertex = graph.insertVertex(parentVertex, null, `${functionName}()`, ...vertexDimensions , leafStyle);\n                allNodesCombined[functionName] = vertex;\n            } else {\n                vertex = allNodesCombined[functionName];\n            }\n        }\n\n        const addToGraph = (functionName, edgesForFunction, parentVertex, leafStyle) => {\n            let vertex;\n            const allNodesSeparate = {};\n            const edgeList =  edgesForFunction; \n            if(combineWorkersAndWindow){\n                if(allNodesCombined[functionName] == null){\n                    vertex = graph.insertVertex(parentVertex, null, `${functionName}()`, ...vertexDimensions , leafStyle);\n                    allNodesCombined[functionName] = vertex;\n                } else {\n                    vertex = allNodesCombined[functionName];\n                }\n            } else {\n                if(allNodesSeparate[functionName] == null){\n                    vertex = graph.insertVertex(parentVertex, null, `${functionName}()`, ...vertexDimensions , leafStyle);\n                    allNodesSeparate[functionName] = vertex;\n                } else {\n                    vertex = allNodesSeparate[functionName];\n                }\n            }\n        \n\n\n            for(const edges of edgeList){\n                let previousFunction;\n                for(let stackFunctionName of edges){\n                    let jsStyle = 'JS';\n                        if(stackFunctionName.includes('wasm-function___')){\n                            jsStyle = 'WASM_INTERNAL';\n                            stackFunctionName = stackFunctionName.replace('wasm-function___', '');\n                        }\n                    let currentFunction = combineWorkersAndWindow ?  allNodesCombined[stackFunctionName] : allNodesSeparate[stackFunctionName];\n                    \n                    if(currentFunction == null){\n                        \n                        currentFunction= graph.insertVertex(parentVertex, null, `${stackFunctionName}()`, ...vertexDimensions, jsStyle);\n                        if(combineWorkersAndWindow){\n                            allNodesCombined[stackFunctionName]  = currentFunction;\n                        } else{\n                            allNodesSeparate[stackFunctionName]  = currentFunction;\n                        }\n                    }\n\n                    if(previousFunction != null){\n                        const currentEdges = currentFunction.edges;\n                        const previousEdges = previousFunction.edges;\n                        let alreadyInGraph = false;\n                        if(currentEdges != null){\n                            for(const edge of currentEdges){\n                                if(edge.target.value === previousFunction.value ){\n                                    // debugger;\n                                    alreadyInGraph = true;\n                                }\n                            }\n                        }\n\n                        if(!alreadyInGraph){\n                            graph.insertEdge(parentVertex, null, '', currentFunction, previousFunction);\n                        }\n                        previousFunction = currentFunction;\n\n                        \n                    } else {\n                        previousFunction = currentFunction;\n                    }\n    \n                }\n            }\n        }\n\n        for(const scopeInstrumentationRecords of [windowDetails, ...workers]){\n            const wasmFileHashes = Object.keys(scopeInstrumentationRecords.WasmFiles);\n\n            for(const wasmFileHash of wasmFileHashes){\n                const wasmRecordedCallDetails = scopeInstrumentationRecords.WasmFiles[wasmFileHash];\n    \n                const debugFunctionNames = wasmRecordedCallDetails.functionNameObjects;\n                const wasmExportCalls = wasmRecordedCallDetails.exportCalls;\n                const wasmImportCalls = wasmRecordedCallDetails.importCalls;\n                const exportFuntionNames = Object.keys(wasmExportCalls);\n                const importFuntionNames = Object.keys(wasmImportCalls);\n    \n                if(combineWorkersAndWindow){\n                    for(const exportFuntionName of exportFuntionNames){\n                        addKeyFunctions(exportFuntionName, parent, 'WASM_EXPORT');\n                    }\n                }\n\n                //Need to be sliced and formatted\n                for(const exportFuntionName of exportFuntionNames){\n                    const edgeList = wasmExportCalls[exportFuntionName];\n                    addToGraph(exportFuntionName, edgeList, parent, 'WASM_EXPORT');\n                }\n        \n                if(combineWorkersAndWindow){\n                    for(const importFuntionName of importFuntionNames){\n                        addKeyFunctions(importFuntionName, parent, 'WASM_IMPORT');\n                    }\n                }\n\n                for(const importFuntionName of importFuntionNames){\n                    const edgeList = wasmImportCalls[importFuntionName];\n                    addToGraph(importFuntionName, edgeList, parent, 'WASM_IMPORT');\n                }\n            }\n        }\n\n\n        \n        model\n        .endUpdate();\n        layout.execute(parent)\n\n\n    }\n\n    componentDidMount(){\n        this.drawGraph();\n\n\n\n        var container = this.graphRef.current.children[0];\n\n        let eventsHandler = {\n            haltEventListeners: ['touchstart', 'touchend', 'touchmove', 'touchleave', 'touchcancel']\n        , init: function(options) {\n            var instance = options.instance\n              , initialScale = 1\n              , pannedX = 0\n              , pannedY = 0\n            // Init Hammer\n            // Listen only for pointer and touch events\n            this.hammer = Hammer(options.svgElement, {\n              inputClass: Hammer.SUPPORT_POINTER_EVENTS ? Hammer.PointerEventInput : Hammer.TouchInput\n            })\n            // Enable pinch\n            this.hammer.get('pinch').set({enable: true})\n            // Handle double tap\n            this.hammer.on('doubletap', function(ev){\n              instance.zoomIn()\n            })\n            // Handle pan\n            this.hammer.on('panstart panmove', function(ev){\n              // On pan start reset panned variables\n              if (ev.type === 'panstart') {\n                pannedX = 0\n                pannedY = 0\n              }\n              // Pan only the difference\n              instance.panBy({x: ev.deltaX - pannedX, y: ev.deltaY - pannedY})\n              pannedX = ev.deltaX\n              pannedY = ev.deltaY\n            })\n            // Handle pinch\n            this.hammer.on('pinchstart pinchmove', function(ev){\n              // On pinch start remember initial zoom\n              if (ev.type === 'pinchstart') {\n                initialScale = instance.getZoom()\n                instance.zoomAtPoint(initialScale * ev.scale, {x: ev.center.x, y: ev.center.y})\n              }\n              instance.zoomAtPoint(initialScale * ev.scale, {x: ev.center.x, y: ev.center.y})\n            })\n            // Prevent moving the page on some devices when panning over SVG\n            options.svgElement.addEventListener('touchmove', function(e){ e.preventDefault(); });\n          }\n        , destroy: function(){\n            this.hammer.destroy()\n          }\n        }\n\n        this.svgPanZoom = svgPanZoom(container, {\n            zoomScaleSensitivity: 0.2\n            , minZoom: 0.2\n            , contain: true\n            ,customEventsHandler: eventsHandler\n        })\n        \n        \n\n    }\n\n\n\n    render() {\n        const {graphOptions} = this.state;\n        const {combineWorkersAndWindow, tooLarge, useGrayscale} = graphOptions;\n        const isChecked = useGrayscale === true;\n\n        return (\n            <div>\n            <h4>JS/Wasm Interaction Graph</h4>\n            <Row>\n                <Col sm={3}>\n                    <div style={{\n                        width: '20px',\n                        height: '20px',\n                        backgroundColor: colorScale['WASM_EXPORT'].fill,\n                        display: 'inline-block'\n                    }}>\n                    </div>\n                    &nbsp;\n                    <span>WebAssembly Export</span>\n                </Col>\n                <Col sm={3}>\n                    <div style={{\n                        width: '20px',\n                        height: '20px',\n                        backgroundColor: colorScale['WASM_IMPORT'].fill,\n                        display: 'inline-block'\n                    }}>\n                    </div>\n                    &nbsp;\n                    <span>WebAssembly Imported JS Function</span>\n                </Col>\n                <Col sm={3}>\n                    <div style={{\n                        width: '20px',\n                        height: '20px',\n                        backgroundColor: colorScale.WASM_INTERNAL.fill,\n                        display: 'inline-block'\n                    }}>\n                    </div>\n                    &nbsp;\n                    <span>WebAssembly Internal Function</span>\n                </Col>\n                <Col sm={3}>\n                    <div style={{\n                        width: '20px',\n                        height: '20px',\n                        backgroundColor: colorScale.JS.fill,\n                        display: 'inline-block'\n                    }}>\n                    </div>\n                    &nbsp;\n                    <span>JavaScript Function</span>\n                </Col>\n            </Row>\n            <Row style={{\n                position: 'absolute',\n                left: '0',\n                margin: '0',\n                padding: '0',\n                width: '99vw'\n            }}>\n                <Col>\n                   \n                    <div id=\"graph\" ref={this.graphRef}\n                    style={{\n                        width: '100%',\n                        overflow: 'hidden',\n                        border: '1px solid #ececec',\n                        borderRadius: '5px',\n                    }}></div>\n                </Col>\n            </Row>\n            </div>\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}