{"ast":null,"code":"var __jsx = React.createElement;\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport React, { Component } from 'react';\nimport Router, { withRouter } from 'next/router';\nimport Result from '../components/results';\nimport ReactLoading from 'react-loading';\nimport { Line, Circle } from 'rc-progress';\nimport axios from 'axios';\nimport '../styles/index.css';\nconst TIME_TO_WAIT = 30;\n\nclass Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: null,\n      action: null,\n      urlToScan: '',\n      urlInputError: false,\n      uploadInputError: false,\n      uploadLoading: false,\n      urlLoading: false,\n      uploadProgress: null,\n      isOn: false,\n      secondsLeft: 0\n    };\n    this.fileInput = React.createRef();\n    this.handleURLChange = this.handleURLChange.bind(this);\n    this.handleUploadClick = this.handleUploadClick.bind(this);\n    this.handleScanClick = this.handleScanClick.bind(this);\n    this.handleURLKeyUp = this.handleURLKeyUp.bind(this);\n    this.handleURLKeyDown = this.handleURLKeyDown.bind(this);\n    this.hanldeUploadChange = this.hanldeUploadChange.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n  }\n\n  startTimer() {\n    this.setState({\n      isOn: true,\n      secondsLeft: TIME_TO_WAIT\n    });\n    this.timer = setInterval(() => {\n      const secondsLeft = this.state.secondsLeft;\n\n      if (secondsLeft <= 0) {\n        this.setState({\n          isOn: false\n        });\n        this.stopTimer();\n      }\n\n      this.setState({\n        secondsLeft: secondsLeft - 1\n      });\n    }, 1000);\n  }\n\n  stopTimer() {\n    this.setState({\n      isOn: false\n    });\n    clearInterval(this.timer);\n  }\n\n  componentWillReceiveProps() {\n    const {\n      pathname,\n      query\n    } = this.props.router;\n    const {\n      showResults\n    } = query;\n    const {\n      results,\n      action\n    } = this.state;\n\n    if (pathname == '/' && showResults) {\n      this.setState({\n        results: null,\n        action: null,\n        urlToScan: '',\n        urlInputError: false,\n        uploadInputError: false,\n        uploadLoading: false,\n        urlLoading: false,\n        uploadProgress: null\n      });\n      Router.replace('/');\n    }\n  }\n\n  componentDidMount() {\n    const {\n      pathname,\n      query\n    } = this.props.router;\n    const {\n      showResults\n    } = query;\n    const {\n      results,\n      action\n    } = this.state;\n\n    if (showResults && !results) {\n      Router.replace('/');\n    }\n\n    this.setState({\n      results: null,\n      action: null,\n      urlToScan: '',\n      urlInputError: false,\n      uploadInputError: false,\n      uploadLoading: false,\n      urlLoading: false,\n      uploadProgress: null\n    });\n  }\n\n  handleURLKeyUp(e) {\n    this.setState({\n      urlInputError: false\n    });\n  }\n\n  handleURLKeyDown(e) {\n    if (e.key === 'Enter') {\n      this.handleScanClick();\n    }\n  }\n\n  hanldeUploadChange(e) {\n    this.setState({\n      uploadInputError: false\n    });\n  }\n\n  handleUploadClick() {\n    if (this.state.uploadLoading) {\n      return;\n    }\n\n    const router = this.props.router;\n    const href = '/?showResults=1';\n    const as = '/results';\n\n    if (this.fileInput.current.files.length < 1) {\n      this.setState({\n        uploadInputError: true\n      });\n      return;\n    }\n\n    const file = this.fileInput.current.files[0];\n\n    if (!file.name.endsWith('.wasm')) {\n      this.setState({\n        uploadInputError: true\n      });\n      return;\n    }\n\n    this.setState({\n      uploadInputError: false,\n      action: 'upload'\n    });\n    const data = new FormData();\n    data.append('wasm-file', file);\n    data.append('action', 'upload');\n    const xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', e => {\n      const response = xhr.response;\n      this.setState({\n        results: response,\n        uploadLoading: false\n      });\n      Router.push(href, as);\n    });\n    xhr.upload.addEventListener(\"progress\", event => {\n      if (event.lengthComputable) {\n        const uploadProgress = {\n          state: \"pending\",\n          percentage: event.loaded / event.total * 100\n        };\n        this.setState({\n          uploadProgress: uploadProgress\n        });\n      }\n    });\n    xhr.upload.addEventListener(\"load\", event => {\n      const uploadProgress = {\n        state: \"done\",\n        percentage: 100\n      };\n      this.setState({\n        uploadProgress: uploadProgress\n      });\n    });\n    xhr.responseType = 'json';\n    xhr.open('post', '/uploadFile');\n    xhr.send(data);\n    this.setState({\n      uploadLoading: true\n    });\n  }\n\n  handleURLChange(e) {\n    this.setState({\n      urlToScan: e.target.value\n    });\n  }\n\n  handleScanClick() {\n    if (this.state.urlLoading) {\n      return;\n    }\n\n    const href = '/?showResults=1';\n    const as = '/results';\n    const {\n      action,\n      urlToScan\n    } = this.state; //Obtained from: https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url\n\n    var expression = /[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)?/gi;\n    var regex = new RegExp(expression);\n\n    if (!urlToScan.match(regex)) {\n      this.setState({\n        urlInputError: true\n      });\n      return;\n    } else {\n      this.setState({\n        urlInputError: false,\n        action: 'scan'\n      });\n    }\n\n    this.setState({\n      urlLoading: true\n    });\n    this.startTimer();\n    axios.post('/scan', {\n      action: 'scan',\n      urlToScan\n    }).then(response => {\n      const data = response.data;\n      this.setState({\n        results: data,\n        urlLoading: false\n      });\n      Router.push(href, as);\n    });\n  }\n\n  render() {\n    const {\n      pathname,\n      query\n    } = this.props.router;\n    const {\n      results,\n      action,\n      urlToScan,\n      urlInputError,\n      uploadInputError,\n      uploadLoading,\n      urlLoading,\n      uploadProgress,\n      secondsLeft,\n      isOn\n    } = this.state;\n    const {\n      showResults\n    } = query;\n    const urlButtonText = urlLoading ? __jsx(ReactLoading, {\n      type: \"bars\",\n      height: '100%',\n      width: 30\n    }) : 'Scan';\n    let scanProgressSection = null;\n\n    if (uploadProgress) {\n      const {\n        percentage,\n        state\n      } = uploadProgress;\n\n      if (state !== 'done') {\n        uploadProgressSection = __jsx(\"span\", null, \" Upload complete\");\n      }\n\n      uploadProgressSection = __jsx(\"div\", null, __jsx(\"br\", null), __jsx(\"span\", null, \"Upload Progress: \"), __jsx(\"br\", null), __jsx(Line, {\n        percent: percentage,\n        strokeWidth: \"2\",\n        strokeColor: \"#98C964\"\n      }));\n    }\n\n    if (urlLoading) {\n      const percentage = 100 * (TIME_TO_WAIT - secondsLeft) / TIME_TO_WAIT;\n      scanProgressSection = __jsx(\"div\", null, __jsx(\"br\", null), __jsx(\"span\", null, \"Scan Progress: \"), __jsx(\"br\", null), __jsx(Line, {\n        percent: percentage,\n        strokeWidth: \"2\",\n        strokeColor: \"#98C964\"\n      }));\n    }\n\n    const headerSection = __jsx(\"div\", null);\n\n    const requestSection = __jsx(\"div\", null, __jsx(\"p\", null), __jsx(Form.Group, {\n      controlId: \"urlToScan\"\n    }, __jsx(Form.Label, {\n      className: \"lead\"\n    }, \"Enter a URL to scan here:\"), __jsx(Form.Control, {\n      isInvalid: urlInputError,\n      placeholder: \"http://example.com\",\n      accept: \".wasm\",\n      value: urlToScan,\n      onChange: this.handleURLChange,\n      onKeyUp: this.handleURLKeyUp,\n      onKeyDown: this.handleURLKeyDown,\n      maxLength: 1900\n    }), scanProgressSection, __jsx(Form.Control.Feedback, {\n      type: \"invalid\"\n    }, \"Please provide a valid URL\")), __jsx(\"p\", null, __jsx(Button, {\n      variant: \"primary\",\n      type: \"button\",\n      onClick: this.handleScanClick\n    }, urlButtonText)));\n\n    const resultsSection = !results ? __jsx(\"span\", null) : __jsx(Result, {\n      action: action,\n      results: results\n    });\n    const mainSection = !showResults ? requestSection : resultsSection;\n    return __jsx(\"div\", null, __jsx(Container, null, headerSection, mainSection));\n  }\n\n}\n\nexport default withRouter(Index);","map":{"version":3,"sources":["D:/Work/WasmView/pages/index.js"],"names":["Button","Container","Form","React","Component","Router","withRouter","Result","ReactLoading","Line","Circle","axios","TIME_TO_WAIT","Index","constructor","props","state","results","action","urlToScan","urlInputError","uploadInputError","uploadLoading","urlLoading","uploadProgress","isOn","secondsLeft","fileInput","createRef","handleURLChange","bind","handleUploadClick","handleScanClick","handleURLKeyUp","handleURLKeyDown","hanldeUploadChange","startTimer","stopTimer","setState","timer","setInterval","clearInterval","componentWillReceiveProps","pathname","query","router","showResults","replace","componentDidMount","e","key","href","as","current","files","length","file","name","endsWith","data","FormData","append","xhr","XMLHttpRequest","addEventListener","response","push","upload","event","lengthComputable","percentage","loaded","total","responseType","open","send","target","value","expression","regex","RegExp","match","post","then","render","urlButtonText","scanProgressSection","uploadProgressSection","headerSection","requestSection","resultsSection","mainSection"],"mappings":"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","sourcesContent":["import Button from 'react-bootstrap/Button'\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport React, { Component } from 'react'\nimport Router, { withRouter } from 'next/router';\nimport Result from '../components/results';\nimport ReactLoading from 'react-loading';\nimport { Line, Circle } from 'rc-progress';\nimport axios from 'axios';\nimport '../styles/index.css';\n\n\nconst TIME_TO_WAIT = 30;\nclass Index extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            results: null,\n            action: null,\n            urlToScan: '',\n            urlInputError: false,\n            uploadInputError: false,\n            uploadLoading: false,\n            urlLoading: false,\n            uploadProgress: null,\n            isOn: false,\n            secondsLeft: 0,\n\n        }\n\n        this.fileInput = React.createRef();\n        this.handleURLChange = this.handleURLChange.bind(this);\n        this.handleUploadClick = this.handleUploadClick.bind(this);\n        this.handleScanClick = this.handleScanClick.bind(this);\n        this.handleURLKeyUp = this.handleURLKeyUp.bind(this);\n        this.handleURLKeyDown = this.handleURLKeyDown.bind(this);\n        this.hanldeUploadChange = this.hanldeUploadChange.bind(this);\n        this.startTimer = this.startTimer.bind(this)\n        this.stopTimer = this.stopTimer.bind(this)\n    }\n\n    startTimer() {\n        this.setState({\n            isOn: true,\n            secondsLeft: TIME_TO_WAIT,\n\n        })\n\n        this.timer = setInterval(() =>{ \n            const secondsLeft = this.state.secondsLeft;\n            if(secondsLeft <= 0){\n                this.setState({\n                    isOn: false,\n                })\n                this.stopTimer();\n            }\n\n            this.setState({\n                secondsLeft: secondsLeft - 1,\n            })\n        }\n        , 1000);\n    }\n\n    stopTimer() {\n        this.setState({isOn: false})\n        clearInterval(this.timer)\n    }\n\n    componentWillReceiveProps(){\n        const { pathname, query } = this.props.router\n        const {showResults} = query;\n        const {results, action}  =this.state;\n\n        if(pathname == '/' && showResults){\n            this.setState({\n                results: null,\n                action: null,\n                urlToScan: '',\n                urlInputError: false,\n                uploadInputError: false,\n                uploadLoading: false,\n                urlLoading: false,\n                uploadProgress: null\n            })\n            Router.replace('/');\n        }\n        \n    }\n\n    componentDidMount(){\n        const { pathname, query } = this.props.router\n        const {showResults} = query;\n        const {results, action}  =this.state;\n\n        if(showResults && !results){\n            Router.replace('/');\n        }\n\n        this.setState({\n            results: null,\n            action: null,\n            urlToScan: '',\n            urlInputError: false,\n            uploadInputError: false,\n            uploadLoading: false,\n            urlLoading: false,\n            uploadProgress: null\n        })\n    }\n\n    handleURLKeyUp(e){\n        this.setState({\n            urlInputError: false\n        });\n    }\n\n    handleURLKeyDown(e){\n        if (e.key === 'Enter') {\n            this.handleScanClick();\n          }\n    }\n\n    hanldeUploadChange(e){\n        this.setState({\n            uploadInputError: false,\n        });\n    }\n\n    handleUploadClick(){\n        if(this.state.uploadLoading){\n            return;\n        }\n        const router = this.props.router;\n        const href = '/?showResults=1';\n        const as = '/results';\n        \n        if(this.fileInput.current.files.length < 1){\n            this.setState({uploadInputError: true});\n            return;\n        } \n        const file = this.fileInput.current.files[0]\n\n        if(!file.name.endsWith('.wasm')){\n            this.setState({uploadInputError: true});\n            return;\n        }\n        this.setState({\n            uploadInputError: false,\n            action: 'upload',\n        });\n        \n\n        const data = new FormData();\n        data.append('wasm-file', file);\n        data.append('action','upload');\n\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', (e) => {\n            const response = xhr.response;\n            this.setState({\n                results: response,\n                uploadLoading: false\n            })\n            Router.push(href, as);\n        });\n\n        xhr.upload.addEventListener(\"progress\", event => {\n            if (event.lengthComputable) {\n                const uploadProgress = {\n                    state: \"pending\",\n                    percentage: (event.loaded / event.total) * 100\n                };\n\n                this.setState({ uploadProgress: uploadProgress });\n            }\n        });\n\n        xhr.upload.addEventListener(\"load\", event => {\n            const uploadProgress = { state: \"done\", \n            percentage: 100 };\n            this.setState({ uploadProgress: uploadProgress });\n        });\n\n        xhr.responseType = 'json';\n        xhr.open('post', '/uploadFile'); \n        xhr.send(data)\n\n        this.setState({\n            uploadLoading: true\n        })\n    }\n\n    handleURLChange(e){\n        this.setState({\n            urlToScan: e.target.value\n        });\n\n    }\n\n    handleScanClick(){\n        if(this.state.urlLoading){\n            return;\n        }\n\n        const href = '/?showResults=1';\n        const as = '/results';\n        const {action, urlToScan} = this.state;\n        //Obtained from: https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url\n        var expression = /[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)?/gi;\n        var regex = new RegExp(expression);\n        \n        if(!urlToScan.match(regex)){\n            this.setState({\n                urlInputError: true\n            });\n            return;\n        }  else {\n            this.setState({\n                urlInputError: false,\n                action: 'scan',\n\n            });\n        }\n\n        this.setState({\n            urlLoading: true\n        });\n\n        this.startTimer();\n\n        axios.post('/scan',{\n            action: 'scan', urlToScan\n        })\n        .then((response) => {\n            const data = response.data;\n            this.setState({\n                results: data,\n                urlLoading: false\n            });\n            Router.push(href, as);\n        })\n        \n\n        \n    }\n\n    render() {\n        const { pathname, query } = this.props.router\n        const {results, action, urlToScan, urlInputError, uploadInputError, uploadLoading, urlLoading, uploadProgress, secondsLeft, isOn}  = this.state;\n        const {showResults} = query;\n        const urlButtonText = urlLoading? <ReactLoading type=\"bars\" height={'100%'} width={30}/> : 'Scan'\n        let scanProgressSection = null;\n\n        if(uploadProgress){\n            const {percentage, state} = uploadProgress\n            if(state !== 'done'){\n                uploadProgressSection =  <span> Upload complete</span>\n            }\n            uploadProgressSection = <div>\n                <br/>\n                <span>Upload Progress: </span>\n                <br/>\n                <Line percent={percentage}\n                strokeWidth=\"2\"\n                strokeColor=\"#98C964\" />\n            </div> \n        }\n\n        if(urlLoading){\n            const percentage = 100* (TIME_TO_WAIT - secondsLeft) / TIME_TO_WAIT;\n             scanProgressSection = <div>\n                <br/>\n                <span>Scan Progress: </span>\n                <br/>\n                <Line percent={percentage}\n                strokeWidth=\"2\"\n                strokeColor=\"#98C964\" />\n            </div> \n        }\n\n        const headerSection = (\n            <div></div>\n            )\n        const requestSection = (\n            <div>\n                <p></p>\n                    <Form.Group controlId=\"urlToScan\">\n                        <Form.Label className=\"lead\">Enter a URL to scan here:</Form.Label>\n                        <Form.Control isInvalid={urlInputError}\n                                     placeholder=\"http://example.com\"\n                                        accept=\".wasm\" \n                                        value={urlToScan}\n                                        onChange={this.handleURLChange}\n                                        onKeyUp={this.handleURLKeyUp}\n                                        onKeyDown={this.handleURLKeyDown}\n                                        maxLength={1900}\n                                        />\n                        {scanProgressSection}\n\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please provide a valid URL\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                <p>\n                <Button variant=\"primary\" type=\"button\" onClick={this.handleScanClick}>\n                    {urlButtonText}\n                </Button>\n                </p>\n            </div>\n        )\n\n        const resultsSection = !results ? <span></span> : \n        (<Result action={action} results={results}></Result>);\n\n        const mainSection = !showResults ? requestSection : resultsSection\n        return (\n            <div>\n                <Container>\n                    {headerSection}\n                        {mainSection}\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Index);"]},"metadata":{},"sourceType":"module"}