{"ast":null,"code":"var __jsx = React.createElement;\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport React, { Component } from 'react';\nimport Router, { withRouter } from 'next/router';\nimport Result from '../components/results';\nimport ReactLoading from 'react-loading';\nimport { Line, Circle } from 'rc-progress';\nimport axios from 'axios';\nimport '../styles/index.css';\nconst TIME_TO_WAIT = 30;\n\nclass Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: null,\n      action: null,\n      urlToScan: '',\n      urlInputError: false,\n      uploadInputError: false,\n      uploadLoading: false,\n      urlLoading: false,\n      uploadProgress: null,\n      isOn: false,\n      secondsLeft: 0\n    };\n    this.fileInput = React.createRef();\n    this.handleURLChange = this.handleURLChange.bind(this);\n    this.handleUploadClick = this.handleUploadClick.bind(this);\n    this.handleScanClick = this.handleScanClick.bind(this);\n    this.handleURLKeyUp = this.handleURLKeyUp.bind(this);\n    this.handleURLKeyDown = this.handleURLKeyDown.bind(this);\n    this.hanldeUploadChange = this.hanldeUploadChange.bind(this);\n    this.startTimer = this.startTimer.bind(this);\n    this.stopTimer = this.stopTimer.bind(this);\n  }\n\n  startTimer() {\n    this.setState({\n      isOn: true,\n      secondsLeft: TIME_TO_WAIT\n    });\n    this.timer = setInterval(() => {\n      const secondsLeft = this.state.secondsLeft;\n\n      if (secondsLeft <= 0) {\n        this.setState({\n          isOn: false\n        });\n        this.stopTimer();\n      }\n\n      this.setState({\n        secondsLeft: secondsLeft - 1\n      });\n    }, 1000);\n  }\n\n  stopTimer() {\n    this.setState({\n      isOn: false\n    });\n    clearInterval(this.timer);\n  }\n\n  componentWillReceiveProps() {\n    const {\n      pathname,\n      query\n    } = this.props.router;\n    const {\n      showResults\n    } = query;\n    const {\n      results,\n      action\n    } = this.state;\n\n    if (pathname == '/' && showResults) {\n      this.setState({\n        results: null,\n        action: null,\n        urlToScan: '',\n        urlInputError: false,\n        uploadInputError: false,\n        uploadLoading: false,\n        urlLoading: false,\n        uploadProgress: null\n      });\n      Router.replace('/');\n    }\n  }\n\n  componentDidMount() {\n    const {\n      pathname,\n      query\n    } = this.props.router;\n    const {\n      showResults\n    } = query;\n    const {\n      results,\n      action\n    } = this.state;\n\n    if (showResults && !results) {\n      Router.replace('/');\n    }\n\n    this.setState({\n      results: null,\n      action: null,\n      urlToScan: '',\n      urlInputError: false,\n      uploadInputError: false,\n      uploadLoading: false,\n      urlLoading: false,\n      uploadProgress: null\n    });\n  }\n\n  handleURLKeyUp(e) {\n    this.setState({\n      urlInputError: false\n    });\n  }\n\n  handleURLKeyDown(e) {\n    if (e.key === 'Enter') {\n      this.handleScanClick();\n    }\n  }\n\n  hanldeUploadChange(e) {\n    this.setState({\n      uploadInputError: false\n    });\n  }\n\n  handleUploadClick() {\n    if (this.state.uploadLoading) {\n      return;\n    }\n\n    const router = this.props.router;\n    const href = '/?showResults=1';\n    const as = '/results';\n\n    if (this.fileInput.current.files.length < 1) {\n      this.setState({\n        uploadInputError: true\n      });\n      return;\n    }\n\n    const file = this.fileInput.current.files[0];\n\n    if (!file.name.endsWith('.wasm')) {\n      this.setState({\n        uploadInputError: true\n      });\n      return;\n    }\n\n    this.setState({\n      uploadInputError: false,\n      action: 'upload'\n    });\n    const data = new FormData();\n    data.append('wasm-file', file);\n    data.append('action', 'upload');\n    const xhr = new XMLHttpRequest();\n    xhr.addEventListener('load', e => {\n      const response = xhr.response;\n      this.setState({\n        results: response,\n        uploadLoading: false\n      });\n      Router.push(href, as);\n    });\n    xhr.upload.addEventListener(\"progress\", event => {\n      if (event.lengthComputable) {\n        const uploadProgress = {\n          state: \"pending\",\n          percentage: event.loaded / event.total * 100\n        };\n        this.setState({\n          uploadProgress: uploadProgress\n        });\n      }\n    });\n    xhr.upload.addEventListener(\"load\", event => {\n      const uploadProgress = {\n        state: \"done\",\n        percentage: 100\n      };\n      this.setState({\n        uploadProgress: uploadProgress\n      });\n    });\n    xhr.responseType = 'json';\n    xhr.open('post', '/uploadFile');\n    xhr.send(data);\n    this.setState({\n      uploadLoading: true\n    });\n  }\n\n  handleURLChange(e) {\n    this.setState({\n      urlToScan: e.target.value\n    });\n  }\n\n  handleScanClick() {\n    if (this.state.urlLoading) {\n      return;\n    }\n\n    const href = '/?showResults=1';\n    const as = '/results';\n    const {\n      action,\n      urlToScan\n    } = this.state; //Obtained from: https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url\n\n    var expression = /[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)?/gi;\n    var regex = new RegExp(expression);\n\n    if (!urlToScan.match(regex)) {\n      this.setState({\n        urlInputError: true\n      });\n      return;\n    } else {\n      this.setState({\n        urlInputError: false,\n        action: 'scan'\n      });\n    }\n\n    this.setState({\n      urlLoading: true\n    });\n    this.startTimer();\n    axios.post('/scan', {\n      action: 'scan',\n      urlToScan\n    }).then(response => {\n      const data = response.data;\n      this.setState({\n        results: data,\n        urlLoading: false\n      });\n      Router.push(href, as);\n    });\n  }\n\n  render() {\n    const {\n      pathname,\n      query\n    } = this.props.router;\n    const {\n      results,\n      action,\n      urlToScan,\n      urlInputError,\n      uploadInputError,\n      uploadLoading,\n      urlLoading,\n      uploadProgress,\n      secondsLeft,\n      isOn\n    } = this.state;\n    const {\n      showResults\n    } = query;\n    const urlButtonText = urlLoading ? __jsx(ReactLoading, {\n      type: \"bars\",\n      height: '100%',\n      width: 30\n    }) : 'Scan';\n    let scanProgressSection = null;\n\n    if (uploadProgress) {\n      const {\n        percentage,\n        state\n      } = uploadProgress;\n\n      if (state !== 'done') {\n        uploadProgressSection = __jsx(\"span\", null, \" Upload complete\");\n      }\n\n      uploadProgressSection = __jsx(\"div\", null, __jsx(\"br\", null), __jsx(\"span\", null, \"Upload Progress: \"), __jsx(\"br\", null), __jsx(Line, {\n        percent: percentage,\n        strokeWidth: \"2\",\n        strokeColor: \"#98C964\"\n      }));\n    }\n\n    if (urlLoading) {\n      const percentage = 100 * (TIME_TO_WAIT - secondsLeft) / TIME_TO_WAIT;\n      scanProgressSection = __jsx(\"div\", null, __jsx(\"br\", null), __jsx(\"span\", null, \"Scan Progress: \"), __jsx(\"br\", null), __jsx(Line, {\n        percent: percentage,\n        strokeWidth: \"2\",\n        strokeColor: \"#98C964\"\n      }));\n    }\n\n    const headerSection = __jsx(\"div\", null);\n\n    const requestSection = __jsx(\"div\", null, __jsx(\"p\", null), __jsx(Form.Group, {\n      controlId: \"urlToScan\"\n    }, __jsx(Form.Label, {\n      className: \"lead\"\n    }, \"Enter a URL to scan here:\"), __jsx(Form.Control, {\n      isInvalid: urlInputError,\n      placeholder: \"http://example.com\",\n      accept: \".wasm\",\n      value: urlToScan,\n      onChange: this.handleURLChange,\n      onKeyUp: this.handleURLKeyUp,\n      onKeyDown: this.handleURLKeyDown,\n      maxLength: 1900\n    }), scanProgressSection, __jsx(Form.Control.Feedback, {\n      type: \"invalid\"\n    }, \"Please provide a valid URL\")), __jsx(\"p\", null, __jsx(Button, {\n      variant: \"primary\",\n      type: \"button\",\n      onClick: this.handleScanClick\n    }, urlButtonText)));\n\n    const resultsSection = !results ? __jsx(\"span\", null) : __jsx(Result, {\n      action: action,\n      results: results\n    });\n    const mainSection = !showResults ? requestSection : resultsSection;\n    return __jsx(\"div\", null, __jsx(Container, null, headerSection, mainSection));\n  }\n\n}\n\nexport default withRouter(Index);","map":null,"metadata":{},"sourceType":"module"}