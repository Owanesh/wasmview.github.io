{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport React, { Component } from 'react';\nimport Router, { withRouter } from 'next/router';\nimport Result from '../components/results';\nimport ReactLoading from 'react-loading';\nimport { Line, Circle } from 'rc-progress';\nimport axios from 'axios';\nimport '../styles/index.css';\nvar TIME_TO_WAIT = 30;\n\nvar Index =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Index, _Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.state = {\n      results: null,\n      action: null,\n      urlToScan: '',\n      urlInputError: false,\n      uploadInputError: false,\n      uploadLoading: false,\n      urlLoading: false,\n      uploadProgress: null,\n      isOn: false,\n      secondsLeft: 0\n    };\n    _this.fileInput = React.createRef();\n    _this.handleURLChange = _this.handleURLChange.bind(_assertThisInitialized(_this));\n    _this.handleUploadClick = _this.handleUploadClick.bind(_assertThisInitialized(_this));\n    _this.handleScanClick = _this.handleScanClick.bind(_assertThisInitialized(_this));\n    _this.handleURLKeyUp = _this.handleURLKeyUp.bind(_assertThisInitialized(_this));\n    _this.handleURLKeyDown = _this.handleURLKeyDown.bind(_assertThisInitialized(_this));\n    _this.hanldeUploadChange = _this.hanldeUploadChange.bind(_assertThisInitialized(_this));\n    _this.startTimer = _this.startTimer.bind(_assertThisInitialized(_this));\n    _this.stopTimer = _this.stopTimer.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"startTimer\",\n    value: function startTimer() {\n      var _this2 = this;\n\n      this.setState({\n        isOn: true,\n        secondsLeft: TIME_TO_WAIT\n      });\n      this.timer = setInterval(function () {\n        var secondsLeft = _this2.state.secondsLeft;\n\n        if (secondsLeft <= 0) {\n          _this2.setState({\n            isOn: false\n          });\n\n          _this2.stopTimer();\n        }\n\n        _this2.setState({\n          secondsLeft: secondsLeft - 1\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"stopTimer\",\n    value: function stopTimer() {\n      this.setState({\n        isOn: false\n      });\n      clearInterval(this.timer);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps() {\n      var _this$props$router = this.props.router,\n          pathname = _this$props$router.pathname,\n          query = _this$props$router.query;\n      var showResults = query.showResults;\n      var _this$state = this.state,\n          results = _this$state.results,\n          action = _this$state.action;\n\n      if (pathname == '/' && showResults) {\n        this.setState({\n          results: null,\n          action: null,\n          urlToScan: '',\n          urlInputError: false,\n          uploadInputError: false,\n          uploadLoading: false,\n          urlLoading: false,\n          uploadProgress: null\n        });\n        Router.replace('/');\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props$router2 = this.props.router,\n          pathname = _this$props$router2.pathname,\n          query = _this$props$router2.query;\n      var showResults = query.showResults;\n      var _this$state2 = this.state,\n          results = _this$state2.results,\n          action = _this$state2.action;\n\n      if (showResults && !results) {\n        Router.replace('/');\n      }\n\n      this.setState({\n        results: null,\n        action: null,\n        urlToScan: '',\n        urlInputError: false,\n        uploadInputError: false,\n        uploadLoading: false,\n        urlLoading: false,\n        uploadProgress: null\n      });\n    }\n  }, {\n    key: \"handleURLKeyUp\",\n    value: function handleURLKeyUp(e) {\n      this.setState({\n        urlInputError: false\n      });\n    }\n  }, {\n    key: \"handleURLKeyDown\",\n    value: function handleURLKeyDown(e) {\n      if (e.key === 'Enter') {\n        this.handleScanClick();\n      }\n    }\n  }, {\n    key: \"hanldeUploadChange\",\n    value: function hanldeUploadChange(e) {\n      this.setState({\n        uploadInputError: false\n      });\n    }\n  }, {\n    key: \"handleUploadClick\",\n    value: function handleUploadClick() {\n      var _this3 = this;\n\n      if (this.state.uploadLoading) {\n        return;\n      }\n\n      var router = this.props.router;\n      var href = '/?showResults=1';\n      var as = '/results';\n\n      if (this.fileInput.current.files.length < 1) {\n        this.setState({\n          uploadInputError: true\n        });\n        return;\n      }\n\n      var file = this.fileInput.current.files[0];\n\n      if (!file.name.endsWith('.wasm')) {\n        this.setState({\n          uploadInputError: true\n        });\n        return;\n      }\n\n      this.setState({\n        uploadInputError: false,\n        action: 'upload'\n      });\n      var data = new FormData();\n      data.append('wasm-file', file);\n      data.append('action', 'upload');\n      var xhr = new XMLHttpRequest();\n      xhr.addEventListener('load', function (e) {\n        var response = xhr.response;\n\n        _this3.setState({\n          results: response,\n          uploadLoading: false\n        });\n\n        Router.push(href, as);\n      });\n      xhr.upload.addEventListener(\"progress\", function (event) {\n        if (event.lengthComputable) {\n          var uploadProgress = {\n            state: \"pending\",\n            percentage: event.loaded / event.total * 100\n          };\n\n          _this3.setState({\n            uploadProgress: uploadProgress\n          });\n        }\n      });\n      xhr.upload.addEventListener(\"load\", function (event) {\n        var uploadProgress = {\n          state: \"done\",\n          percentage: 100\n        };\n\n        _this3.setState({\n          uploadProgress: uploadProgress\n        });\n      });\n      xhr.responseType = 'json';\n      xhr.open('post', '/uploadFile');\n      xhr.send(data);\n      this.setState({\n        uploadLoading: true\n      });\n    }\n  }, {\n    key: \"handleURLChange\",\n    value: function handleURLChange(e) {\n      this.setState({\n        urlToScan: e.target.value\n      });\n    }\n  }, {\n    key: \"handleScanClick\",\n    value: function handleScanClick() {\n      var _this4 = this;\n\n      if (this.state.urlLoading) {\n        return;\n      }\n\n      var href = '/?showResults=1';\n      var as = '/results';\n      var _this$state3 = this.state,\n          action = _this$state3.action,\n          urlToScan = _this$state3.urlToScan; //Obtained from: https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url\n\n      var expression = /[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)?/gi;\n      var regex = new RegExp(expression);\n\n      if (!urlToScan.match(regex)) {\n        this.setState({\n          urlInputError: true\n        });\n        return;\n      } else {\n        this.setState({\n          urlInputError: false,\n          action: 'scan'\n        });\n      }\n\n      this.setState({\n        urlLoading: true\n      });\n      this.startTimer();\n      axios.post('/scan', {\n        action: 'scan',\n        urlToScan: urlToScan\n      }).then(function (response) {\n        var data = response.data;\n\n        _this4.setState({\n          results: data,\n          urlLoading: false\n        });\n\n        Router.push(href, as);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$router3 = this.props.router,\n          pathname = _this$props$router3.pathname,\n          query = _this$props$router3.query;\n      var _this$state4 = this.state,\n          results = _this$state4.results,\n          action = _this$state4.action,\n          urlToScan = _this$state4.urlToScan,\n          urlInputError = _this$state4.urlInputError,\n          uploadInputError = _this$state4.uploadInputError,\n          uploadLoading = _this$state4.uploadLoading,\n          urlLoading = _this$state4.urlLoading,\n          uploadProgress = _this$state4.uploadProgress,\n          secondsLeft = _this$state4.secondsLeft,\n          isOn = _this$state4.isOn;\n      var showResults = query.showResults;\n      var urlButtonText = urlLoading ? __jsx(ReactLoading, {\n        type: \"bars\",\n        height: '100%',\n        width: 30\n      }) : 'Scan';\n      var scanProgressSection = null;\n\n      if (uploadProgress) {\n        var percentage = uploadProgress.percentage,\n            state = uploadProgress.state;\n\n        if (state !== 'done') {\n          uploadProgressSection = __jsx(\"span\", null, \" Upload complete\");\n        }\n\n        uploadProgressSection = __jsx(\"div\", null, __jsx(\"br\", null), __jsx(\"span\", null, \"Upload Progress: \"), __jsx(\"br\", null), __jsx(Line, {\n          percent: percentage,\n          strokeWidth: \"2\",\n          strokeColor: \"#98C964\"\n        }));\n      }\n\n      if (urlLoading) {\n        var _percentage = 100 * (TIME_TO_WAIT - secondsLeft) / TIME_TO_WAIT;\n\n        scanProgressSection = __jsx(\"div\", null, __jsx(\"br\", null), __jsx(\"span\", null, \"Scan Progress: \"), __jsx(\"br\", null), __jsx(Line, {\n          percent: _percentage,\n          strokeWidth: \"2\",\n          strokeColor: \"#98C964\"\n        }));\n      }\n\n      var headerSection = __jsx(\"div\", null);\n\n      var requestSection = __jsx(\"div\", null, __jsx(\"p\", null), __jsx(Form.Group, {\n        controlId: \"urlToScan\"\n      }, __jsx(Form.Label, {\n        className: \"lead\"\n      }, \"Enter a URL to scan here:\"), __jsx(Form.Control, {\n        isInvalid: urlInputError,\n        placeholder: \"http://example.com\",\n        accept: \".wasm\",\n        value: urlToScan,\n        onChange: this.handleURLChange,\n        onKeyUp: this.handleURLKeyUp,\n        onKeyDown: this.handleURLKeyDown,\n        maxLength: 1900\n      }), scanProgressSection, __jsx(Form.Control.Feedback, {\n        type: \"invalid\"\n      }, \"Please provide a valid URL\")), __jsx(\"p\", null, __jsx(Button, {\n        variant: \"primary\",\n        type: \"button\",\n        onClick: this.handleScanClick\n      }, urlButtonText)));\n\n      var resultsSection = !results ? __jsx(\"span\", null) : __jsx(Result, {\n        action: action,\n        results: results\n      });\n      var mainSection = !showResults ? requestSection : resultsSection;\n      return __jsx(\"div\", null, __jsx(Container, null, headerSection, mainSection));\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nexport default withRouter(Index);","map":{"version":3,"sources":["D:/Work/WasmView/pages/index.js"],"names":["Button","Container","Form","React","Component","Router","withRouter","Result","ReactLoading","Line","Circle","axios","TIME_TO_WAIT","Index","props","state","results","action","urlToScan","urlInputError","uploadInputError","uploadLoading","urlLoading","uploadProgress","isOn","secondsLeft","fileInput","createRef","handleURLChange","bind","handleUploadClick","handleScanClick","handleURLKeyUp","handleURLKeyDown","hanldeUploadChange","startTimer","stopTimer","setState","timer","setInterval","clearInterval","router","pathname","query","showResults","replace","e","key","href","as","current","files","length","file","name","endsWith","data","FormData","append","xhr","XMLHttpRequest","addEventListener","response","push","upload","event","lengthComputable","percentage","loaded","total","responseType","open","send","target","value","expression","regex","RegExp","match","post","then","urlButtonText","scanProgressSection","uploadProgressSection","headerSection","requestSection","resultsSection","mainSection"],"mappings":"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","sourcesContent":["import Button from 'react-bootstrap/Button'\nimport Container from 'react-bootstrap/Container'\nimport Form from 'react-bootstrap/Form'\nimport React, { Component } from 'react'\nimport Router, { withRouter } from 'next/router';\nimport Result from '../components/results';\nimport ReactLoading from 'react-loading';\nimport { Line, Circle } from 'rc-progress';\nimport axios from 'axios';\nimport '../styles/index.css';\n\n\nconst TIME_TO_WAIT = 30;\nclass Index extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            results: null,\n            action: null,\n            urlToScan: '',\n            urlInputError: false,\n            uploadInputError: false,\n            uploadLoading: false,\n            urlLoading: false,\n            uploadProgress: null,\n            isOn: false,\n            secondsLeft: 0,\n\n        }\n\n        this.fileInput = React.createRef();\n        this.handleURLChange = this.handleURLChange.bind(this);\n        this.handleUploadClick = this.handleUploadClick.bind(this);\n        this.handleScanClick = this.handleScanClick.bind(this);\n        this.handleURLKeyUp = this.handleURLKeyUp.bind(this);\n        this.handleURLKeyDown = this.handleURLKeyDown.bind(this);\n        this.hanldeUploadChange = this.hanldeUploadChange.bind(this);\n        this.startTimer = this.startTimer.bind(this)\n        this.stopTimer = this.stopTimer.bind(this)\n    }\n\n    startTimer() {\n        this.setState({\n            isOn: true,\n            secondsLeft: TIME_TO_WAIT,\n\n        })\n\n        this.timer = setInterval(() =>{ \n            const secondsLeft = this.state.secondsLeft;\n            if(secondsLeft <= 0){\n                this.setState({\n                    isOn: false,\n                })\n                this.stopTimer();\n            }\n\n            this.setState({\n                secondsLeft: secondsLeft - 1,\n            })\n        }\n        , 1000);\n    }\n\n    stopTimer() {\n        this.setState({isOn: false})\n        clearInterval(this.timer)\n    }\n\n    componentWillReceiveProps(){\n        const { pathname, query } = this.props.router\n        const {showResults} = query;\n        const {results, action}  =this.state;\n\n        if(pathname == '/' && showResults){\n            this.setState({\n                results: null,\n                action: null,\n                urlToScan: '',\n                urlInputError: false,\n                uploadInputError: false,\n                uploadLoading: false,\n                urlLoading: false,\n                uploadProgress: null\n            })\n            Router.replace('/');\n        }\n        \n    }\n\n    componentDidMount(){\n        const { pathname, query } = this.props.router\n        const {showResults} = query;\n        const {results, action}  =this.state;\n\n        if(showResults && !results){\n            Router.replace('/');\n        }\n\n        this.setState({\n            results: null,\n            action: null,\n            urlToScan: '',\n            urlInputError: false,\n            uploadInputError: false,\n            uploadLoading: false,\n            urlLoading: false,\n            uploadProgress: null\n        })\n    }\n\n    handleURLKeyUp(e){\n        this.setState({\n            urlInputError: false\n        });\n    }\n\n    handleURLKeyDown(e){\n        if (e.key === 'Enter') {\n            this.handleScanClick();\n          }\n    }\n\n    hanldeUploadChange(e){\n        this.setState({\n            uploadInputError: false,\n        });\n    }\n\n    handleUploadClick(){\n        if(this.state.uploadLoading){\n            return;\n        }\n        const router = this.props.router;\n        const href = '/?showResults=1';\n        const as = '/results';\n        \n        if(this.fileInput.current.files.length < 1){\n            this.setState({uploadInputError: true});\n            return;\n        } \n        const file = this.fileInput.current.files[0]\n\n        if(!file.name.endsWith('.wasm')){\n            this.setState({uploadInputError: true});\n            return;\n        }\n        this.setState({\n            uploadInputError: false,\n            action: 'upload',\n        });\n        \n\n        const data = new FormData();\n        data.append('wasm-file', file);\n        data.append('action','upload');\n\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', (e) => {\n            const response = xhr.response;\n            this.setState({\n                results: response,\n                uploadLoading: false\n            })\n            Router.push(href, as);\n        });\n\n        xhr.upload.addEventListener(\"progress\", event => {\n            if (event.lengthComputable) {\n                const uploadProgress = {\n                    state: \"pending\",\n                    percentage: (event.loaded / event.total) * 100\n                };\n\n                this.setState({ uploadProgress: uploadProgress });\n            }\n        });\n\n        xhr.upload.addEventListener(\"load\", event => {\n            const uploadProgress = { state: \"done\", \n            percentage: 100 };\n            this.setState({ uploadProgress: uploadProgress });\n        });\n\n        xhr.responseType = 'json';\n        xhr.open('post', '/uploadFile'); \n        xhr.send(data)\n\n        this.setState({\n            uploadLoading: true\n        })\n    }\n\n    handleURLChange(e){\n        this.setState({\n            urlToScan: e.target.value\n        });\n\n    }\n\n    handleScanClick(){\n        if(this.state.urlLoading){\n            return;\n        }\n\n        const href = '/?showResults=1';\n        const as = '/results';\n        const {action, urlToScan} = this.state;\n        //Obtained from: https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url\n        var expression = /[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)?/gi;\n        var regex = new RegExp(expression);\n        \n        if(!urlToScan.match(regex)){\n            this.setState({\n                urlInputError: true\n            });\n            return;\n        }  else {\n            this.setState({\n                urlInputError: false,\n                action: 'scan',\n\n            });\n        }\n\n        this.setState({\n            urlLoading: true\n        });\n\n        this.startTimer();\n\n        axios.post('/scan',{\n            action: 'scan', urlToScan\n        })\n        .then((response) => {\n            const data = response.data;\n            this.setState({\n                results: data,\n                urlLoading: false\n            });\n            Router.push(href, as);\n        })\n        \n\n        \n    }\n\n    render() {\n        const { pathname, query } = this.props.router\n        const {results, action, urlToScan, urlInputError, uploadInputError, uploadLoading, urlLoading, uploadProgress, secondsLeft, isOn}  = this.state;\n        const {showResults} = query;\n        const urlButtonText = urlLoading? <ReactLoading type=\"bars\" height={'100%'} width={30}/> : 'Scan'\n        let scanProgressSection = null;\n\n        if(uploadProgress){\n            const {percentage, state} = uploadProgress\n            if(state !== 'done'){\n                uploadProgressSection =  <span> Upload complete</span>\n            }\n            uploadProgressSection = <div>\n                <br/>\n                <span>Upload Progress: </span>\n                <br/>\n                <Line percent={percentage}\n                strokeWidth=\"2\"\n                strokeColor=\"#98C964\" />\n            </div> \n        }\n\n        if(urlLoading){\n            const percentage = 100* (TIME_TO_WAIT - secondsLeft) / TIME_TO_WAIT;\n             scanProgressSection = <div>\n                <br/>\n                <span>Scan Progress: </span>\n                <br/>\n                <Line percent={percentage}\n                strokeWidth=\"2\"\n                strokeColor=\"#98C964\" />\n            </div> \n        }\n\n        const headerSection = (\n            <div></div>\n            )\n        const requestSection = (\n            <div>\n                <p></p>\n                    <Form.Group controlId=\"urlToScan\">\n                        <Form.Label className=\"lead\">Enter a URL to scan here:</Form.Label>\n                        <Form.Control isInvalid={urlInputError}\n                                     placeholder=\"http://example.com\"\n                                        accept=\".wasm\" \n                                        value={urlToScan}\n                                        onChange={this.handleURLChange}\n                                        onKeyUp={this.handleURLKeyUp}\n                                        onKeyDown={this.handleURLKeyDown}\n                                        maxLength={1900}\n                                        />\n                        {scanProgressSection}\n\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please provide a valid URL\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                <p>\n                <Button variant=\"primary\" type=\"button\" onClick={this.handleScanClick}>\n                    {urlButtonText}\n                </Button>\n                </p>\n            </div>\n        )\n\n        const resultsSection = !results ? <span></span> : \n        (<Result action={action} results={results}></Result>);\n\n        const mainSection = !showResults ? requestSection : resultsSection\n        return (\n            <div>\n                <Container>\n                    {headerSection}\n                        {mainSection}\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default withRouter(Index);"]},"metadata":{},"sourceType":"module"}