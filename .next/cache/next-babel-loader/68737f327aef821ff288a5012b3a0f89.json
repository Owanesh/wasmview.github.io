{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport React, { Component } from 'react';\nimport Router, { withRouter } from 'next/router';\nimport Result from '../components/results';\nimport ReactLoading from 'react-loading';\nimport { Line, Circle } from 'rc-progress';\nimport axios from 'axios';\nimport '../styles/index.css';\nvar TIME_TO_WAIT = 30;\n\nvar Index =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Index, _Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.state = {\n      results: null,\n      action: null,\n      urlToScan: '',\n      urlInputError: false,\n      uploadInputError: false,\n      uploadLoading: false,\n      urlLoading: false,\n      uploadProgress: null,\n      isOn: false,\n      secondsLeft: 0\n    };\n    _this.fileInput = React.createRef();\n    _this.handleURLChange = _this.handleURLChange.bind(_assertThisInitialized(_this));\n    _this.handleUploadClick = _this.handleUploadClick.bind(_assertThisInitialized(_this));\n    _this.handleScanClick = _this.handleScanClick.bind(_assertThisInitialized(_this));\n    _this.handleURLKeyUp = _this.handleURLKeyUp.bind(_assertThisInitialized(_this));\n    _this.handleURLKeyDown = _this.handleURLKeyDown.bind(_assertThisInitialized(_this));\n    _this.hanldeUploadChange = _this.hanldeUploadChange.bind(_assertThisInitialized(_this));\n    _this.startTimer = _this.startTimer.bind(_assertThisInitialized(_this));\n    _this.stopTimer = _this.stopTimer.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Index, [{\n    key: \"startTimer\",\n    value: function startTimer() {\n      var _this2 = this;\n\n      this.setState({\n        isOn: true,\n        secondsLeft: TIME_TO_WAIT\n      });\n      this.timer = setInterval(function () {\n        var secondsLeft = _this2.state.secondsLeft;\n\n        if (secondsLeft <= 0) {\n          _this2.setState({\n            isOn: false\n          });\n\n          _this2.stopTimer();\n        }\n\n        _this2.setState({\n          secondsLeft: secondsLeft - 1\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"stopTimer\",\n    value: function stopTimer() {\n      this.setState({\n        isOn: false\n      });\n      clearInterval(this.timer);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps() {\n      var _this$props$router = this.props.router,\n          pathname = _this$props$router.pathname,\n          query = _this$props$router.query;\n      var showResults = query.showResults;\n      var _this$state = this.state,\n          results = _this$state.results,\n          action = _this$state.action;\n\n      if (pathname == '/' && showResults) {\n        this.setState({\n          results: null,\n          action: null,\n          urlToScan: '',\n          urlInputError: false,\n          uploadInputError: false,\n          uploadLoading: false,\n          urlLoading: false,\n          uploadProgress: null\n        });\n        Router.replace('/');\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props$router2 = this.props.router,\n          pathname = _this$props$router2.pathname,\n          query = _this$props$router2.query;\n      var showResults = query.showResults;\n      var _this$state2 = this.state,\n          results = _this$state2.results,\n          action = _this$state2.action;\n\n      if (showResults && !results) {\n        Router.replace('/');\n      }\n\n      this.setState({\n        results: null,\n        action: null,\n        urlToScan: '',\n        urlInputError: false,\n        uploadInputError: false,\n        uploadLoading: false,\n        urlLoading: false,\n        uploadProgress: null\n      });\n    }\n  }, {\n    key: \"handleURLKeyUp\",\n    value: function handleURLKeyUp(e) {\n      this.setState({\n        urlInputError: false\n      });\n    }\n  }, {\n    key: \"handleURLKeyDown\",\n    value: function handleURLKeyDown(e) {\n      if (e.key === 'Enter') {\n        this.handleScanClick();\n      }\n    }\n  }, {\n    key: \"hanldeUploadChange\",\n    value: function hanldeUploadChange(e) {\n      this.setState({\n        uploadInputError: false\n      });\n    }\n  }, {\n    key: \"handleUploadClick\",\n    value: function handleUploadClick() {\n      var _this3 = this;\n\n      if (this.state.uploadLoading) {\n        return;\n      }\n\n      var router = this.props.router;\n      var href = '/?showResults=1';\n      var as = '/results';\n\n      if (this.fileInput.current.files.length < 1) {\n        this.setState({\n          uploadInputError: true\n        });\n        return;\n      }\n\n      var file = this.fileInput.current.files[0];\n\n      if (!file.name.endsWith('.wasm')) {\n        this.setState({\n          uploadInputError: true\n        });\n        return;\n      }\n\n      this.setState({\n        uploadInputError: false,\n        action: 'upload'\n      });\n      var data = new FormData();\n      data.append('wasm-file', file);\n      data.append('action', 'upload');\n      var xhr = new XMLHttpRequest();\n      xhr.addEventListener('load', function (e) {\n        var response = xhr.response;\n\n        _this3.setState({\n          results: response,\n          uploadLoading: false\n        });\n\n        Router.push(href, as);\n      });\n      xhr.upload.addEventListener(\"progress\", function (event) {\n        if (event.lengthComputable) {\n          var uploadProgress = {\n            state: \"pending\",\n            percentage: event.loaded / event.total * 100\n          };\n\n          _this3.setState({\n            uploadProgress: uploadProgress\n          });\n        }\n      });\n      xhr.upload.addEventListener(\"load\", function (event) {\n        var uploadProgress = {\n          state: \"done\",\n          percentage: 100\n        };\n\n        _this3.setState({\n          uploadProgress: uploadProgress\n        });\n      });\n      xhr.responseType = 'json';\n      xhr.open('post', '/uploadFile');\n      xhr.send(data);\n      this.setState({\n        uploadLoading: true\n      });\n    }\n  }, {\n    key: \"handleURLChange\",\n    value: function handleURLChange(e) {\n      this.setState({\n        urlToScan: e.target.value\n      });\n    }\n  }, {\n    key: \"handleScanClick\",\n    value: function handleScanClick() {\n      var _this4 = this;\n\n      if (this.state.urlLoading) {\n        return;\n      }\n\n      var href = '/?showResults=1';\n      var as = '/results';\n      var _this$state3 = this.state,\n          action = _this$state3.action,\n          urlToScan = _this$state3.urlToScan; //Obtained from: https://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url\n\n      var expression = /[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)?/gi;\n      var regex = new RegExp(expression);\n\n      if (!urlToScan.match(regex)) {\n        this.setState({\n          urlInputError: true\n        });\n        return;\n      } else {\n        this.setState({\n          urlInputError: false,\n          action: 'scan'\n        });\n      }\n\n      this.setState({\n        urlLoading: true\n      });\n      this.startTimer();\n      axios.post('/scan', {\n        action: 'scan',\n        urlToScan: urlToScan\n      }).then(function (response) {\n        var data = response.data;\n\n        _this4.setState({\n          results: data,\n          urlLoading: false\n        });\n\n        Router.push(href, as);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$router3 = this.props.router,\n          pathname = _this$props$router3.pathname,\n          query = _this$props$router3.query;\n      var _this$state4 = this.state,\n          results = _this$state4.results,\n          action = _this$state4.action,\n          urlToScan = _this$state4.urlToScan,\n          urlInputError = _this$state4.urlInputError,\n          uploadInputError = _this$state4.uploadInputError,\n          uploadLoading = _this$state4.uploadLoading,\n          urlLoading = _this$state4.urlLoading,\n          uploadProgress = _this$state4.uploadProgress,\n          secondsLeft = _this$state4.secondsLeft,\n          isOn = _this$state4.isOn;\n      var showResults = query.showResults;\n      var urlButtonText = urlLoading ? __jsx(ReactLoading, {\n        type: \"bars\",\n        height: '100%',\n        width: 30\n      }) : 'Scan';\n      var scanProgressSection = null;\n\n      if (uploadProgress) {\n        var percentage = uploadProgress.percentage,\n            state = uploadProgress.state;\n\n        if (state !== 'done') {\n          uploadProgressSection = __jsx(\"span\", null, \" Upload complete\");\n        }\n\n        uploadProgressSection = __jsx(\"div\", null, __jsx(\"br\", null), __jsx(\"span\", null, \"Upload Progress: \"), __jsx(\"br\", null), __jsx(Line, {\n          percent: percentage,\n          strokeWidth: \"2\",\n          strokeColor: \"#98C964\"\n        }));\n      }\n\n      if (urlLoading) {\n        var _percentage = 100 * (TIME_TO_WAIT - secondsLeft) / TIME_TO_WAIT;\n\n        scanProgressSection = __jsx(\"div\", null, __jsx(\"br\", null), __jsx(\"span\", null, \"Scan Progress: \"), __jsx(\"br\", null), __jsx(Line, {\n          percent: _percentage,\n          strokeWidth: \"2\",\n          strokeColor: \"#98C964\"\n        }));\n      }\n\n      var headerSection = __jsx(\"div\", null);\n\n      var requestSection = __jsx(\"div\", null, __jsx(\"p\", null), __jsx(Form.Group, {\n        controlId: \"urlToScan\"\n      }, __jsx(Form.Label, {\n        className: \"lead\"\n      }, \"Enter a URL to scan here:\"), __jsx(Form.Control, {\n        isInvalid: urlInputError,\n        placeholder: \"http://example.com\",\n        accept: \".wasm\",\n        value: urlToScan,\n        onChange: this.handleURLChange,\n        onKeyUp: this.handleURLKeyUp,\n        onKeyDown: this.handleURLKeyDown,\n        maxLength: 1900\n      }), scanProgressSection, __jsx(Form.Control.Feedback, {\n        type: \"invalid\"\n      }, \"Please provide a valid URL\")), __jsx(\"p\", null, __jsx(Button, {\n        variant: \"primary\",\n        type: \"button\",\n        onClick: this.handleScanClick\n      }, urlButtonText)));\n\n      var resultsSection = !results ? __jsx(\"span\", null) : __jsx(Result, {\n        action: action,\n        results: results\n      });\n      var mainSection = !showResults ? requestSection : resultsSection;\n      return __jsx(\"div\", null, __jsx(Container, null, headerSection, mainSection));\n    }\n  }]);\n\n  return Index;\n}(Component);\n\nexport default withRouter(Index);","map":null,"metadata":{},"sourceType":"module"}