{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nvar colorScale = {\n  WASM_EXPORT: {\n    fill: '#1892C7',\n    font: '#FFFFFF'\n  },\n  WASM_IMPORT: {\n    fill: '#FF6939',\n    font: '#FFFFFF'\n  },\n  WASM_INTERNAL: {\n    fill: '#000000',\n    font: '#FFFFFF'\n  },\n  WASM_WORKER: {\n    fill: '#1892C7',\n    font: '#FFFFFF'\n  },\n  JS: {\n    fill: '#cccccc',\n    font: '#000000'\n  }\n};\nvar grayScale = {\n  WASM_EXPORT: {\n    fill: '#000000',\n    font: '#FFFFFF'\n  },\n  WASM_IMPORT: {\n    fill: '#969696',\n    font: '#FFFFFF'\n  },\n  WASM_INTERNAL: {\n    fill: '#cccccc',\n    font: '#000000'\n  },\n  WASM_WORKER: {\n    fill: '#000000',\n    font: '#FFFFFF'\n  },\n  JS: {\n    fill: '#636363',\n    font: '#FFFFFF'\n  }\n};\n\nvar GraphComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GraphComponent, _Component);\n\n  function GraphComponent(props) {\n    var _this;\n\n    _classCallCheck(this, GraphComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GraphComponent).call(this, props));\n    _this.state = {\n      graphOptions: {\n        combineWorkersAndWindow: true,\n        tooLarge: false,\n        useGrayscale: false\n      }\n    };\n    _this.graphRef = React.createRef();\n    _this.handleCheckboxChange = _this.handleCheckboxChange.bind(_assertThisInitialized(_this));\n    _this.svgPanZoom = null;\n    return _this;\n  }\n\n  _createClass(GraphComponent, [{\n    key: \"handleCheckboxChange\",\n    value: function handleCheckboxChange() {\n      var isChecked = this.state.graphOptions.useGrayscale;\n\n      var newGraphOptions = _objectSpread({}, this.state.graphOptions);\n\n      newGraphOptions.useGrayscale = !isChecked;\n      this.setState({\n        graphOptions: newGraphOptions\n      });\n    }\n  }, {\n    key: \"initGraph\",\n    value: function initGraph() {\n      var container = this.graphRef.current;\n      var model = new mxGraphModel();\n      this.graph = new mxGraph(container, model);\n      var graph = this.graph;\n      graph.setPanning(false);\n      graph.setEnabled(false);\n      graph.autoSizeCellsOnAdd = true;\n      var colorsToUse = this.state.graphOptions.useGrayscale ? grayScale : colorScale;\n\n      var commonFunctionStyle = function commonFunctionStyle() {\n        var style = new Object();\n        style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_RECTANGLE;\n        style[mxConstants.STYLE_AUTOSIZE] = '1';\n        style[mxConstants.STYLE_SPACING] = '20'; // style[mxConstants.STYLE_SPACING_TOP] = '2';\n        // style[mxConstants.STYLE_SPACING_BOTTOM] = '2';\n\n        style[mxConstants.STYLE_MOVABLE] = '1';\n        style[mxConstants.STYLE_FONTSIZE] = '20';\n        style[mxConstants.STYLE_FONTSTYLE] = mxConstants.FONT_BOLD;\n        style[mxConstants.STYLE_FONTFAMILY] = 'Arial';\n        return style;\n      };\n\n      var wasmExportFunctionStyle = commonFunctionStyle();\n      wasmExportFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_EXPORT'].fill;\n      wasmExportFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n      wasmExportFunctionStyle[mxConstants.STYLE_FONTCOLOR] = colorsToUse['WASM_EXPORT'].font;\n      graph.getStylesheet().putCellStyle('WASM_EXPORT', wasmExportFunctionStyle);\n      var wasmImportFunctionStyle = commonFunctionStyle();\n      wasmImportFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_IMPORT'].fill;\n      wasmImportFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n      wasmImportFunctionStyle[mxConstants.STYLE_FONTCOLOR] = colorsToUse['WASM_IMPORT'].font;\n      graph.getStylesheet().putCellStyle('WASM_IMPORT', wasmImportFunctionStyle);\n      var wasmInternalFunctionStyle = commonFunctionStyle();\n      wasmInternalFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_INTERNAL'].fill;\n      wasmInternalFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n      wasmInternalFunctionStyle[mxConstants.STYLE_FONTCOLOR] = colorsToUse['WASM_INTERNAL'].font;\n      graph.getStylesheet().putCellStyle('WASM_INTERNAL', wasmInternalFunctionStyle);\n      var wasmWorkerFunctionStyle = commonFunctionStyle();\n      wasmWorkerFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['WASM_WORKER'].fill;\n      wasmWorkerFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n      wasmWorkerFunctionStyle[mxConstants.STYLE_FONTCOLOR] = colorsToUse['WASM_WORKER'].font;\n      graph.getStylesheet().putCellStyle('WASM_WORKER', wasmWorkerFunctionStyle);\n      var jsFunctionStyle = commonFunctionStyle();\n      jsFunctionStyle[mxConstants.STYLE_FILLCOLOR] = colorsToUse['JS'].fill;\n      jsFunctionStyle[mxConstants.STYLE_STROKECOLOR] = '#FFFFFF';\n      jsFunctionStyle[mxConstants.STYLE_FONTCOLOR] = colorsToUse['JS'].font;\n      graph.getStylesheet().putCellStyle('JS', jsFunctionStyle);\n      return graph;\n    }\n  }, {\n    key: \"drawGraph\",\n    value: function drawGraph() {\n      var container = this.graphRef.current;\n      var combineWorkersAndWindow = this.state.graphOptions.combineWorkersAndWindow;\n      var details = this.props.details;\n      var windowDetails = details.window;\n      var workers = details.workers;\n      var vertexDimensions = [0, 0, 100, 50];\n\n      if (windowDetails == null) {\n        return __jsx(\"span\", null);\n      }\n\n      var exportCalls = windowDetails.exportCalls;\n      var importCalls = windowDetails.importCalls;\n      var graph;\n\n      if (this.graph == null) {\n        graph = this.initGraph();\n      } else {\n        graph = this.graph;\n        graph.removeCells(graph.getChildCells(graph.getDefaultParent(), true, true));\n        graph = null;\n        graph = this.initGraph();\n      }\n\n      var model = graph.getModel();\n      var parent = graph.getDefaultParent();\n      var layout = new mxHierarchicalLayout(graph);\n      layout.interRankCellSpacing = 100;\n      model.beginUpdate();\n      var allNodesCombined = {};\n\n      var addKeyFunctions = function addKeyFunctions(functionName, parentVertex, leafStyle) {\n        var vertex;\n\n        if (allNodesCombined[functionName] == null) {\n          var _graph;\n\n          vertex = (_graph = graph).insertVertex.apply(_graph, [parentVertex, null, \"\".concat(functionName, \"()\")].concat(vertexDimensions, [leafStyle]));\n          allNodesCombined[functionName] = vertex;\n        } else {\n          vertex = allNodesCombined[functionName];\n        }\n      };\n\n      var addToGraph = function addToGraph(functionName, edgesForFunction, parentVertex, leafStyle) {\n        var vertex;\n        var allNodesSeparate = {};\n        var edgeList = edgesForFunction;\n\n        if (combineWorkersAndWindow) {\n          if (allNodesCombined[functionName] == null) {\n            var _graph2;\n\n            vertex = (_graph2 = graph).insertVertex.apply(_graph2, [parentVertex, null, \"\".concat(functionName, \"()\")].concat(vertexDimensions, [leafStyle]));\n            allNodesCombined[functionName] = vertex;\n          } else {\n            vertex = allNodesCombined[functionName];\n          }\n        } else {\n          if (allNodesSeparate[functionName] == null) {\n            var _graph3;\n\n            vertex = (_graph3 = graph).insertVertex.apply(_graph3, [parentVertex, null, \"\".concat(functionName, \"()\")].concat(vertexDimensions, [leafStyle]));\n            allNodesSeparate[functionName] = vertex;\n          } else {\n            vertex = allNodesSeparate[functionName];\n          }\n        }\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _getIterator(edgeList), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var edges = _step.value;\n            var previousFunction = void 0;\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = _getIterator(edges), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var stackFunctionName = _step2.value;\n                var jsStyle = 'JS';\n\n                if (stackFunctionName.includes('wasm-function___')) {\n                  jsStyle = 'WASM_INTERNAL';\n                  stackFunctionName = stackFunctionName.replace('wasm-function___', '');\n                }\n\n                var currentFunction = combineWorkersAndWindow ? allNodesCombined[stackFunctionName] : allNodesSeparate[stackFunctionName];\n\n                if (currentFunction == null) {\n                  var _graph4;\n\n                  currentFunction = (_graph4 = graph).insertVertex.apply(_graph4, [parentVertex, null, \"\".concat(stackFunctionName, \"()\")].concat(vertexDimensions, [jsStyle]));\n\n                  if (combineWorkersAndWindow) {\n                    allNodesCombined[stackFunctionName] = currentFunction;\n                  } else {\n                    allNodesSeparate[stackFunctionName] = currentFunction;\n                  }\n                }\n\n                if (previousFunction != null) {\n                  var currentEdges = currentFunction.edges;\n                  var previousEdges = previousFunction.edges;\n                  var alreadyInGraph = false;\n\n                  if (currentEdges != null) {\n                    var _iteratorNormalCompletion3 = true;\n                    var _didIteratorError3 = false;\n                    var _iteratorError3 = undefined;\n\n                    try {\n                      for (var _iterator3 = _getIterator(currentEdges), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                        var edge = _step3.value;\n\n                        if (edge.target.value === previousFunction.value) {\n                          // debugger;\n                          alreadyInGraph = true;\n                        }\n                      }\n                    } catch (err) {\n                      _didIteratorError3 = true;\n                      _iteratorError3 = err;\n                    } finally {\n                      try {\n                        if (!_iteratorNormalCompletion3 && _iterator3[\"return\"] != null) {\n                          _iterator3[\"return\"]();\n                        }\n                      } finally {\n                        if (_didIteratorError3) {\n                          throw _iteratorError3;\n                        }\n                      }\n                    }\n                  }\n\n                  if (!alreadyInGraph) {\n                    graph.insertEdge(parentVertex, null, '', currentFunction, previousFunction);\n                  }\n\n                  previousFunction = currentFunction;\n                } else {\n                  previousFunction = currentFunction;\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n                  _iterator2[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n              _iterator[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      };\n\n      for (var _i = 0, _arr = [windowDetails].concat(_toConsumableArray(workers)); _i < _arr.length; _i++) {\n        var scopeInstrumentationRecords = _arr[_i];\n\n        var wasmFileHashes = _Object$keys(scopeInstrumentationRecords.WasmFiles);\n\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = _getIterator(wasmFileHashes), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var wasmFileHash = _step4.value;\n            var wasmRecordedCallDetails = scopeInstrumentationRecords.WasmFiles[wasmFileHash];\n            var debugFunctionNames = wasmRecordedCallDetails.functionNameObjects;\n            var wasmExportCalls = wasmRecordedCallDetails.exportCalls;\n            var wasmImportCalls = wasmRecordedCallDetails.importCalls;\n\n            var exportFuntionNames = _Object$keys(wasmExportCalls);\n\n            var importFuntionNames = _Object$keys(wasmImportCalls);\n\n            if (combineWorkersAndWindow) {\n              var _iteratorNormalCompletion5 = true;\n              var _didIteratorError5 = false;\n              var _iteratorError5 = undefined;\n\n              try {\n                for (var _iterator5 = _getIterator(exportFuntionNames), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                  var exportFuntionName = _step5.value;\n                  addKeyFunctions(exportFuntionName, parent, 'WASM_EXPORT');\n                }\n              } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion5 && _iterator5[\"return\"] != null) {\n                    _iterator5[\"return\"]();\n                  }\n                } finally {\n                  if (_didIteratorError5) {\n                    throw _iteratorError5;\n                  }\n                }\n              }\n            } //Need to be sliced and formatted\n\n\n            var _iteratorNormalCompletion6 = true;\n            var _didIteratorError6 = false;\n            var _iteratorError6 = undefined;\n\n            try {\n              for (var _iterator6 = _getIterator(exportFuntionNames), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                var _exportFuntionName = _step6.value;\n                var edgeList = wasmExportCalls[_exportFuntionName];\n                addToGraph(_exportFuntionName, edgeList, parent, 'WASM_EXPORT');\n              }\n            } catch (err) {\n              _didIteratorError6 = true;\n              _iteratorError6 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion6 && _iterator6[\"return\"] != null) {\n                  _iterator6[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError6) {\n                  throw _iteratorError6;\n                }\n              }\n            }\n\n            if (combineWorkersAndWindow) {\n              var _iteratorNormalCompletion7 = true;\n              var _didIteratorError7 = false;\n              var _iteratorError7 = undefined;\n\n              try {\n                for (var _iterator7 = _getIterator(importFuntionNames), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n                  var importFuntionName = _step7.value;\n                  addKeyFunctions(importFuntionName, parent, 'WASM_IMPORT');\n                }\n              } catch (err) {\n                _didIteratorError7 = true;\n                _iteratorError7 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion7 && _iterator7[\"return\"] != null) {\n                    _iterator7[\"return\"]();\n                  }\n                } finally {\n                  if (_didIteratorError7) {\n                    throw _iteratorError7;\n                  }\n                }\n              }\n            }\n\n            var _iteratorNormalCompletion8 = true;\n            var _didIteratorError8 = false;\n            var _iteratorError8 = undefined;\n\n            try {\n              for (var _iterator8 = _getIterator(importFuntionNames), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n                var _importFuntionName = _step8.value;\n                var _edgeList = wasmImportCalls[_importFuntionName];\n                addToGraph(_importFuntionName, _edgeList, parent, 'WASM_IMPORT');\n              }\n            } catch (err) {\n              _didIteratorError8 = true;\n              _iteratorError8 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion8 && _iterator8[\"return\"] != null) {\n                  _iterator8[\"return\"]();\n                }\n              } finally {\n                if (_didIteratorError8) {\n                  throw _iteratorError8;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4[\"return\"] != null) {\n              _iterator4[\"return\"]();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      }\n\n      model.endUpdate();\n      layout.execute(parent);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawGraph();\n      var container = this.graphRef.current.children[0];\n      var eventsHandler = {\n        haltEventListeners: ['touchstart', 'touchend', 'touchmove', 'touchleave', 'touchcancel'],\n        init: function init(options) {\n          var instance = options.instance,\n              initialScale = 1,\n              pannedX = 0,\n              pannedY = 0; // Init Hammer\n          // Listen only for pointer and touch events\n\n          this.hammer = Hammer(options.svgElement, {\n            inputClass: Hammer.SUPPORT_POINTER_EVENTS ? Hammer.PointerEventInput : Hammer.TouchInput\n          }); // Enable pinch\n\n          this.hammer.get('pinch').set({\n            enable: true\n          }); // Handle double tap\n\n          this.hammer.on('doubletap', function (ev) {\n            instance.zoomIn();\n          }); // Handle pan\n\n          this.hammer.on('panstart panmove', function (ev) {\n            // On pan start reset panned variables\n            if (ev.type === 'panstart') {\n              pannedX = 0;\n              pannedY = 0;\n            } // Pan only the difference\n\n\n            instance.panBy({\n              x: ev.deltaX - pannedX,\n              y: ev.deltaY - pannedY\n            });\n            pannedX = ev.deltaX;\n            pannedY = ev.deltaY;\n          }); // Handle pinch\n\n          this.hammer.on('pinchstart pinchmove', function (ev) {\n            // On pinch start remember initial zoom\n            if (ev.type === 'pinchstart') {\n              initialScale = instance.getZoom();\n              instance.zoomAtPoint(initialScale * ev.scale, {\n                x: ev.center.x,\n                y: ev.center.y\n              });\n            }\n\n            instance.zoomAtPoint(initialScale * ev.scale, {\n              x: ev.center.x,\n              y: ev.center.y\n            });\n          }); // Prevent moving the page on some devices when panning over SVG\n\n          options.svgElement.addEventListener('touchmove', function (e) {\n            e.preventDefault();\n          });\n        },\n        destroy: function destroy() {\n          this.hammer.destroy();\n        }\n      };\n      this.svgPanZoom = svgPanZoom(container, {\n        zoomScaleSensitivity: 0.2,\n        minZoom: 0.2,\n        contain: true,\n        customEventsHandler: eventsHandler\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var graphOptions = this.state.graphOptions;\n      var combineWorkersAndWindow = graphOptions.combineWorkersAndWindow,\n          tooLarge = graphOptions.tooLarge,\n          useGrayscale = graphOptions.useGrayscale;\n      var isChecked = useGrayscale === true;\n      return __jsx(\"div\", null, __jsx(\"h4\", null, \"JS/Wasm Interaction Graph\"), __jsx(Row, null, __jsx(Col, {\n        sm: 3\n      }, __jsx(\"div\", {\n        style: {\n          width: '20px',\n          height: '20px',\n          backgroundColor: colorScale['WASM_EXPORT'].fill,\n          display: 'inline-block'\n        }\n      }), \"\\xA0\", __jsx(\"span\", null, \"WebAssembly Export\")), __jsx(Col, {\n        sm: 3\n      }, __jsx(\"div\", {\n        style: {\n          width: '20px',\n          height: '20px',\n          backgroundColor: colorScale['WASM_IMPORT'].fill,\n          display: 'inline-block'\n        }\n      }), \"\\xA0\", __jsx(\"span\", null, \"WebAssembly Imported JS Function\")), __jsx(Col, {\n        sm: 3\n      }, __jsx(\"div\", {\n        style: {\n          width: '20px',\n          height: '20px',\n          backgroundColor: colorScale.WASM_INTERNAL.fill,\n          display: 'inline-block'\n        }\n      }), \"\\xA0\", __jsx(\"span\", null, \"WebAssembly Internal Function\")), __jsx(Col, {\n        sm: 3\n      }, __jsx(\"div\", {\n        style: {\n          width: '20px',\n          height: '20px',\n          backgroundColor: colorScale.JS.fill,\n          display: 'inline-block'\n        }\n      }), \"\\xA0\", __jsx(\"span\", null, \"JavaScript Function\"))), __jsx(Row, {\n        style: {\n          position: 'absolute',\n          left: '0',\n          margin: '0',\n          padding: '0',\n          width: '99vw'\n        }\n      }, __jsx(Col, null, __jsx(\"div\", {\n        id: \"graph\",\n        ref: this.graphRef,\n        style: {\n          width: '100%',\n          overflow: 'hidden',\n          border: '1px solid #ececec',\n          borderRadius: '5px'\n        }\n      }))));\n    }\n  }]);\n\n  return GraphComponent;\n}(Component);\n\nexport { GraphComponent as default };","map":null,"metadata":{},"sourceType":"module"}